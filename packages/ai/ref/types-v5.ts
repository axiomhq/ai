import {
  ToolResultContent,
  Schema,
  ToolCall,
  ToolResult,
  IdGenerator,
  FetchFunction,
} from '@ai-sdk/provider-utils';
export {
  IdGenerator,
  Schema,
  ToolCall,
  ToolResult,
  asSchema,
  createIdGenerator,
  generateId,
  jsonSchema,
} from '@ai-sdk/provider-utils';
import {
  AISDKError,
  SharedV2ProviderMetadata,
  SharedV2ProviderOptions,
  EmbeddingModelV2,
  EmbeddingModelV2Embedding,
  ImageModelV2,
  ImageModelV2CallWarning,
  ImageModelV2ProviderMetadata,
  JSONValue as JSONValue$1,
  LanguageModelV2,
  LanguageModelV2FinishReason,
  LanguageModelV2CallWarning,
  LanguageModelV2Source,
  SpeechModelV1,
  SpeechModelV1CallWarning,
  TranscriptionModelV1,
  TranscriptionModelV1CallWarning,
  LanguageModelV2Usage,
  JSONObject,
  LanguageModelV2ToolCall,
  JSONSchema7,
  LanguageModelV2CallOptions,
  JSONParseError,
  TypeValidationError,
  LanguageModelV2Middleware,
  ProviderV2,
  NoSuchModelError,
} from '@ai-sdk/provider';
export {
  AISDKError,
  APICallError,
  EmptyResponseBodyError,
  InvalidPromptError,
  InvalidResponseDataError,
  JSONParseError,
  JSONSchema7,
  LoadAPIKeyError,
  NoContentGeneratedError,
  NoSuchModelError,
  TypeValidationError,
  UnsupportedFunctionalityError,
} from '@ai-sdk/provider';
import { z } from 'zod';
import { ServerResponse } from 'node:http';
import { AttributeValue, Tracer } from '@opentelemetry/api';
import { ServerResponse as ServerResponse$1 } from 'http';

declare const symbol$f: unique symbol;
declare class InvalidArgumentError extends AISDKError {
  private readonly [symbol$f];
  readonly parameter: string;
  readonly value: unknown;
  constructor({
    parameter,
    value,
    message,
  }: {
    parameter: string;
    value: unknown;
    message: string;
  });
  static isInstance(error: unknown): error is InvalidArgumentError;
}

/**
Additional provider-specific metadata that is returned from the provider.

This is needed to enable provider-specific functionality that can be
fully encapsulated in the provider.
 */
type ProviderMetadata = SharedV2ProviderMetadata;
/**
Additional provider-specific options.

They are passed through to the provider from the AI SDK and enable
provider-specific functionality that can be fully encapsulated in the provider.
 */
type ProviderOptions = SharedV2ProviderOptions;

/**
Data content. Can either be a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer.
 */
type DataContent = string | Uint8Array | ArrayBuffer | Buffer;

/**
Text content part of a prompt. It contains a string of text.
 */
interface TextPart {
  type: 'text';
  /**
  The text content.
     */
  text: string;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
}
/**
Image content part of a prompt. It contains an image.
 */
interface ImagePart {
  type: 'image';
  /**
  Image data. Can either be:
  
  - data: a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer
  - URL: a URL that points to the image
     */
  image: DataContent | URL;
  /**
  Optional IANA media type of the image.
  
  @see https://www.iana.org/assignments/media-types/media-types.xhtml
     */
  mediaType?: string;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
}
/**
File content part of a prompt. It contains a file.
 */
interface FilePart {
  type: 'file';
  /**
  File data. Can either be:
  
  - data: a base64-encoded string, a Uint8Array, an ArrayBuffer, or a Buffer
  - URL: a URL that points to the image
     */
  data: DataContent | URL;
  /**
  Optional filename of the file.
     */
  filename?: string;
  /**
  IANA media type of the file.
  
  @see https://www.iana.org/assignments/media-types/media-types.xhtml
     */
  mediaType: string;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
}
/**
 * Reasoning content part of a prompt. It contains a reasoning.
 */
interface ReasoningPart {
  type: 'reasoning';
  /**
  The reasoning text.
     */
  text: string;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
}
/**
Tool call content part of a prompt. It contains a tool call (usually generated by the AI model).
 */
interface ToolCallPart {
  type: 'tool-call';
  /**
  ID of the tool call. This ID is used to match the tool call with the tool result.
   */
  toolCallId: string;
  /**
  Name of the tool that is being called.
   */
  toolName: string;
  /**
  Arguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.
     */
  args: unknown;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
}
/**
Tool result content part of a prompt. It contains the result of the tool call with the matching ID.
 */
interface ToolResultPart {
  type: 'tool-result';
  /**
  ID of the tool call that this result is associated with.
   */
  toolCallId: string;
  /**
  Name of the tool that generated this result.
    */
  toolName: string;
  /**
  Result of the tool call. This is a JSON-serializable object.
     */
  result: unknown;
  /**
  Multi-part content of the tool result. Only for tools that support multipart results.
     */
  experimental_content?: ToolResultContent;
  /**
  Optional flag if the result is an error or an error message.
     */
  isError?: boolean;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
}

/**
 A system message. It can contain system information.

 Note: using the "system" part of the prompt is strongly preferred
 to increase the resilience against prompt injection attacks,
 and because not all providers support several system messages.
 */
type SystemModelMessage = {
  role: 'system';
  content: string;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
};
/**
@deprecated Use `SystemModelMessage` instead.
 */
type CoreSystemMessage = SystemModelMessage;
declare const systemModelMessageSchema: z.ZodType<SystemModelMessage>;
/**
@deprecated Use `systemModelMessageSchema` instead.
 */
declare const coreSystemMessageSchema: z.ZodType<
  SystemModelMessage,
  z.ZodTypeDef,
  SystemModelMessage
>;
/**
A user message. It can contain text or a combination of text and images.
 */
type UserModelMessage = {
  role: 'user';
  content: UserContent;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
};
/**
@deprecated Use `UserModelMessage` instead.
 */
type CoreUserMessage = UserModelMessage;
declare const userModelMessageSchema: z.ZodType<UserModelMessage>;
/**
@deprecated Use `userModelMessageSchema` instead.
 */
declare const coreUserMessageSchema: z.ZodType<UserModelMessage, z.ZodTypeDef, UserModelMessage>;
/**
Content of a user message. It can be a string or an array of text and image parts.
 */
type UserContent = string | Array<TextPart | ImagePart | FilePart>;
/**
An assistant message. It can contain text, tool calls, or a combination of text and tool calls.
 */
type AssistantModelMessage = {
  role: 'assistant';
  content: AssistantContent;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
};
/**
@deprecated Use `AssistantModelMessage` instead.
 */
type CoreAssistantMessage = AssistantModelMessage;
declare const assistantModelMessageSchema: z.ZodType<AssistantModelMessage>;
/**
@deprecated Use `assistantModelMessageSchema` instead.
 */
declare const coreAssistantMessageSchema: z.ZodType<
  AssistantModelMessage,
  z.ZodTypeDef,
  AssistantModelMessage
>;
/**
Content of an assistant message.
It can be a string or an array of text, image, reasoning, redacted reasoning, and tool call parts.
 */
type AssistantContent = string | Array<TextPart | FilePart | ReasoningPart | ToolCallPart>;
/**
A tool message. It contains the result of one or more tool calls.
 */
type ToolModelMessage = {
  role: 'tool';
  content: ToolContent;
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
   */
  providerOptions?: ProviderOptions;
};
/**
@deprecated Use `ToolModelMessage` instead.
 */
type CoreToolMessage = ToolModelMessage;
declare const toolModelMessageSchema: z.ZodType<ToolModelMessage>;
/**
@deprecated Use `toolModelMessageSchema` instead.
 */
declare const coreToolMessageSchema: z.ZodType<ToolModelMessage, z.ZodTypeDef, ToolModelMessage>;
/**
Content of a tool message. It is an array of tool result parts.
 */
type ToolContent = Array<ToolResultPart>;
/**
A message that can be used in the `messages` field of a prompt.
It can be a user message, an assistant message, or a tool message.
 */
type ModelMessage =
  | SystemModelMessage
  | UserModelMessage
  | AssistantModelMessage
  | ToolModelMessage;
/**
@deprecated Use `ModelMessage` instead.
   */
type CoreMessage = ModelMessage;
declare const modelMessageSchema: z.ZodType<ModelMessage>;
/**
@deprecated Use `modelMessageSchema` instead.
 */
declare const coreMessageSchema: z.ZodType<CoreMessage>;

/**
 * Telemetry configuration.
 */
type TelemetrySettings = {
  /**
   * Enable or disable telemetry. Disabled by default while experimental.
   */
  isEnabled?: boolean;
  /**
   * Enable or disable input recording. Enabled by default.
   *
   * You might want to disable input recording to avoid recording sensitive
   * information, to reduce data transfers, or to increase performance.
   */
  recordInputs?: boolean;
  /**
   * Enable or disable output recording. Enabled by default.
   *
   * You might want to disable output recording to avoid recording sensitive
   * information, to reduce data transfers, or to increase performance.
   */
  recordOutputs?: boolean;
  /**
   * Identifier for this function. Used to group telemetry data by function.
   */
  functionId?: string;
  /**
   * Additional information to include in the telemetry data.
   */
  metadata?: Record<string, AttributeValue>;
  /**
   * A custom tracer to use for the telemetry data.
   */
  tracer?: Tracer;
};

/**
Embedding model that is used by the AI SDK Core functions.
*/
type EmbeddingModel<VALUE> = EmbeddingModelV2<VALUE>;
/**
Embedding.
 */
type Embedding = EmbeddingModelV2Embedding;

/**
Image model that is used by the AI SDK Core functions.
  */
type ImageModel = ImageModelV2;
/**
Warning from the model provider for this call. The call will proceed, but e.g.
some settings might not be supported, which can lead to suboptimal results.
  */
type ImageGenerationWarning = ImageModelV2CallWarning;
/**
Metadata from the model provider for this call
  */
type ImageModelProviderMetadata = ImageModelV2ProviderMetadata;

type ImageModelResponseMetadata = {
  /**
  Timestamp for the start of the generated response.
     */
  timestamp: Date;
  /**
  The ID of the response model that was used to generate the response.
     */
  modelId: string;
  /**
  Response headers.
     */
  headers?: Record<string, string>;
};

type JSONValue = JSONValue$1;

/**
Language model that is used by the AI SDK Core functions.
*/
type LanguageModel = LanguageModelV2;
/**
Reason why a language model finished generating a response.

Can be one of the following:
- `stop`: model generated stop sequence
- `length`: model generated maximum number of tokens
- `content-filter`: content filter violation stopped the model
- `tool-calls`: model triggered tool calls
- `error`: model stopped because of an error
- `other`: model stopped for other reasons
*/
type FinishReason = LanguageModelV2FinishReason;
/**
Warning from the model provider for this call. The call will proceed, but e.g.
some settings might not be supported, which can lead to suboptimal results.
*/
type CallWarning = LanguageModelV2CallWarning;
/**
A source that has been used as input to generate the response.
*/
type Source = LanguageModelV2Source;
/**
Tool choice for the generation. It supports the following settings:

- `auto` (default): the model can choose whether and which tools to call.
- `required`: the model must call a tool. It can choose which tool to call.
- `none`: the model must not call tools
- `{ type: 'tool', toolName: string (typed) }`: the model must call the specified tool
 */
type ToolChoice<TOOLS extends Record<string, unknown>> =
  | 'auto'
  | 'none'
  | 'required'
  | {
      type: 'tool';
      toolName: Extract<keyof TOOLS, string>;
    };

type LanguageModelRequestMetadata = {
  /**
  Request HTTP body that was sent to the provider API.
       */
  body?: unknown;
};

type LanguageModelResponseMetadata = {
  /**
    ID for the generated response.
       */
  id: string;
  /**
    Timestamp for the start of the generated response.
    */
  timestamp: Date;
  /**
    The ID of the response model that was used to generate the response.
    */
  modelId: string;
  /**
  Response headers (available only for providers that use HTTP requests).
       */
  headers?: Record<string, string>;
};

/**
 * Provider for language, text embedding, and image models.
 */
type Provider = {
  /**
    Returns the language model with the given id.
    The model id is then passed to the provider function to get the model.
  
    @param {string} id - The id of the model to return.
  
    @returns {LanguageModel} The language model associated with the id
  
    @throws {NoSuchModelError} If no such model exists.
       */
  languageModel(modelId: string): LanguageModel;
  /**
    Returns the text embedding model with the given id.
    The model id is then passed to the provider function to get the model.
  
    @param {string} id - The id of the model to return.
  
    @returns {LanguageModel} The language model associated with the id
  
    @throws {NoSuchModelError} If no such model exists.
       */
  textEmbeddingModel(modelId: string): EmbeddingModel<string>;
  /**
    Returns the image model with the given id.
    The model id is then passed to the provider function to get the model.
  
    @param {string} id - The id of the model to return.
  
    @returns {ImageModel} The image model associated with the id
    */
  imageModel(modelId: string): ImageModel;
};

/**
Speech model that is used by the AI SDK Core functions.
  */
type SpeechModel = SpeechModelV1;
/**
Warning from the model provider for this call. The call will proceed, but e.g.
some settings might not be supported, which can lead to suboptimal results.
  */
type SpeechWarning = SpeechModelV1CallWarning;

type SpeechModelResponseMetadata = {
  /**
  Timestamp for the start of the generated response.
     */
  timestamp: Date;
  /**
  The ID of the response model that was used to generate the response.
     */
  modelId: string;
  /**
  Response headers.
     */
  headers?: Record<string, string>;
  /**
  Response body.
     */
  body?: unknown;
};

/**
Transcription model that is used by the AI SDK Core functions.
  */
type TranscriptionModel = TranscriptionModelV1;
/**
Warning from the model provider for this call. The call will proceed, but e.g.
some settings might not be supported, which can lead to suboptimal results.
  */
type TranscriptionWarning = TranscriptionModelV1CallWarning;

type TranscriptionModelResponseMetadata = {
  /**
  Timestamp for the start of the generated response.
     */
  timestamp: Date;
  /**
  The ID of the response model that was used to generate the response.
     */
  modelId: string;
  /**
  Response headers.
     */
  headers?: Record<string, string>;
};

/**
Represents the number of tokens used in a prompt and completion.
 */
type LanguageModelUsage = LanguageModelV2Usage;
/**
Represents the number of tokens used in an embedding.
 */
type EmbeddingModelUsage = {
  /**
  The number of tokens used in the embedding.
     */
  tokens: number;
};

/**
 * A generated file.
 */
interface GeneratedFile {
  /**
  File as a base64 encoded string.
       */
  readonly base64: string;
  /**
  File as a Uint8Array.
       */
  readonly uint8Array: Uint8Array;
  /**
  The IANA media type of the file.
  
  @see https://www.iana.org/assignments/media-types/media-types.xhtml
     */
  readonly mediaType: string;
}

/**
Create a union of the given object's values, and optionally specify which keys to get the values from.

Please upvote [this issue](https://github.com/microsoft/TypeScript/issues/31438) if you want to have this type as a built-in in TypeScript.

@example
```
// data.json
{
    'foo': 1,
    'bar': 2,
    'biz': 3
}

// main.ts
import type {ValueOf} from 'type-fest';
import data = require('./data.json');

export function getData(name: string): ValueOf<typeof data> {
    return data[name];
}

export function onlyBar(name: string): ValueOf<typeof data, 'bar'> {
    return data[name];
}

// file.ts
import {getData, onlyBar} from './main';

getData('foo');
//=> 1

onlyBar('foo');
//=> TypeError ...

onlyBar('bar');
//=> 2
```
* @see https://github.com/sindresorhus/type-fest/blob/main/source/value-of.d.ts
*/
type ValueOf<
  ObjectType,
  ValueType extends keyof ObjectType = keyof ObjectType,
> = ObjectType[ValueType];

declare const JSONRPCRequestSchema: z.ZodObject<
  {
    jsonrpc: z.ZodLiteral<'2.0'>;
    id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
  } & {
    method: z.ZodString;
    params: z.ZodOptional<
      z.ZodObject<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        },
        'passthrough',
        z.ZodTypeAny,
        z.objectOutputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >,
        z.objectInputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >
      >
    >;
  },
  'strict',
  z.ZodTypeAny,
  {
    id: string | number;
    method: string;
    jsonrpc: '2.0';
    params?:
      | z.objectOutputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >
      | undefined;
  },
  {
    id: string | number;
    method: string;
    jsonrpc: '2.0';
    params?:
      | z.objectInputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >
      | undefined;
  }
>;
type JSONRPCRequest = z.infer<typeof JSONRPCRequestSchema>;
declare const JSONRPCResponseSchema: z.ZodObject<
  {
    jsonrpc: z.ZodLiteral<'2.0'>;
    id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    result: z.ZodObject<
      {
        _meta: z.ZodOptional<
          z.ZodObject<
            {},
            'passthrough',
            z.ZodTypeAny,
            z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
            z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
          >
        >;
      },
      'passthrough',
      z.ZodTypeAny,
      z.objectOutputType<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        },
        z.ZodTypeAny,
        'passthrough'
      >,
      z.objectInputType<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        },
        z.ZodTypeAny,
        'passthrough'
      >
    >;
  },
  'strict',
  z.ZodTypeAny,
  {
    result: {
      _meta?: z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'> | undefined;
    } & {
      [k: string]: unknown;
    };
    id: string | number;
    jsonrpc: '2.0';
  },
  {
    result: {
      _meta?: z.objectInputType<{}, z.ZodTypeAny, 'passthrough'> | undefined;
    } & {
      [k: string]: unknown;
    };
    id: string | number;
    jsonrpc: '2.0';
  }
>;
type JSONRPCResponse = z.infer<typeof JSONRPCResponseSchema>;
declare const JSONRPCErrorSchema: z.ZodObject<
  {
    jsonrpc: z.ZodLiteral<'2.0'>;
    id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    error: z.ZodObject<
      {
        code: z.ZodNumber;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodUnknown>;
      },
      'strip',
      z.ZodTypeAny,
      {
        message: string;
        code: number;
        data?: unknown;
      },
      {
        message: string;
        code: number;
        data?: unknown;
      }
    >;
  },
  'strict',
  z.ZodTypeAny,
  {
    error: {
      message: string;
      code: number;
      data?: unknown;
    };
    id: string | number;
    jsonrpc: '2.0';
  },
  {
    error: {
      message: string;
      code: number;
      data?: unknown;
    };
    id: string | number;
    jsonrpc: '2.0';
  }
>;
type JSONRPCError = z.infer<typeof JSONRPCErrorSchema>;
declare const JSONRPCNotificationSchema: z.ZodObject<
  {
    jsonrpc: z.ZodLiteral<'2.0'>;
  } & {
    method: z.ZodString;
    params: z.ZodOptional<
      z.ZodObject<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        },
        'passthrough',
        z.ZodTypeAny,
        z.objectOutputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >,
        z.objectInputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >
      >
    >;
  },
  'strict',
  z.ZodTypeAny,
  {
    method: string;
    jsonrpc: '2.0';
    params?:
      | z.objectOutputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >
      | undefined;
  },
  {
    method: string;
    jsonrpc: '2.0';
    params?:
      | z.objectInputType<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          z.ZodTypeAny,
          'passthrough'
        >
      | undefined;
  }
>;
type JSONRPCNotification = z.infer<typeof JSONRPCNotificationSchema>;
declare const JSONRPCMessageSchema: z.ZodUnion<
  [
    z.ZodObject<
      {
        jsonrpc: z.ZodLiteral<'2.0'>;
        id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
      } & {
        method: z.ZodString;
        params: z.ZodOptional<
          z.ZodObject<
            {
              _meta: z.ZodOptional<
                z.ZodObject<
                  {},
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                  z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                >
              >;
            },
            'passthrough',
            z.ZodTypeAny,
            z.objectOutputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >,
            z.objectInputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >
          >
        >;
      },
      'strict',
      z.ZodTypeAny,
      {
        id: string | number;
        method: string;
        jsonrpc: '2.0';
        params?:
          | z.objectOutputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >
          | undefined;
      },
      {
        id: string | number;
        method: string;
        jsonrpc: '2.0';
        params?:
          | z.objectInputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >
          | undefined;
      }
    >,
    z.ZodObject<
      {
        jsonrpc: z.ZodLiteral<'2.0'>;
      } & {
        method: z.ZodString;
        params: z.ZodOptional<
          z.ZodObject<
            {
              _meta: z.ZodOptional<
                z.ZodObject<
                  {},
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                  z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                >
              >;
            },
            'passthrough',
            z.ZodTypeAny,
            z.objectOutputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >,
            z.objectInputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >
          >
        >;
      },
      'strict',
      z.ZodTypeAny,
      {
        method: string;
        jsonrpc: '2.0';
        params?:
          | z.objectOutputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >
          | undefined;
      },
      {
        method: string;
        jsonrpc: '2.0';
        params?:
          | z.objectInputType<
              {
                _meta: z.ZodOptional<
                  z.ZodObject<
                    {},
                    'passthrough',
                    z.ZodTypeAny,
                    z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                    z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                  >
                >;
              },
              z.ZodTypeAny,
              'passthrough'
            >
          | undefined;
      }
    >,
    z.ZodObject<
      {
        jsonrpc: z.ZodLiteral<'2.0'>;
        id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        result: z.ZodObject<
          {
            _meta: z.ZodOptional<
              z.ZodObject<
                {},
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
              >
            >;
          },
          'passthrough',
          z.ZodTypeAny,
          z.objectOutputType<
            {
              _meta: z.ZodOptional<
                z.ZodObject<
                  {},
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                  z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                >
              >;
            },
            z.ZodTypeAny,
            'passthrough'
          >,
          z.objectInputType<
            {
              _meta: z.ZodOptional<
                z.ZodObject<
                  {},
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
                  z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
                >
              >;
            },
            z.ZodTypeAny,
            'passthrough'
          >
        >;
      },
      'strict',
      z.ZodTypeAny,
      {
        result: {
          _meta?: z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'> | undefined;
        } & {
          [k: string]: unknown;
        };
        id: string | number;
        jsonrpc: '2.0';
      },
      {
        result: {
          _meta?: z.objectInputType<{}, z.ZodTypeAny, 'passthrough'> | undefined;
        } & {
          [k: string]: unknown;
        };
        id: string | number;
        jsonrpc: '2.0';
      }
    >,
    z.ZodObject<
      {
        jsonrpc: z.ZodLiteral<'2.0'>;
        id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        error: z.ZodObject<
          {
            code: z.ZodNumber;
            message: z.ZodString;
            data: z.ZodOptional<z.ZodUnknown>;
          },
          'strip',
          z.ZodTypeAny,
          {
            message: string;
            code: number;
            data?: unknown;
          },
          {
            message: string;
            code: number;
            data?: unknown;
          }
        >;
      },
      'strict',
      z.ZodTypeAny,
      {
        error: {
          message: string;
          code: number;
          data?: unknown;
        };
        id: string | number;
        jsonrpc: '2.0';
      },
      {
        error: {
          message: string;
          code: number;
          data?: unknown;
        };
        id: string | number;
        jsonrpc: '2.0';
      }
    >,
  ]
>;
type JSONRPCMessage = z.infer<typeof JSONRPCMessageSchema>;

/**
 * Transport interface for MCP (Model Context Protocol) communication.
 * Maps to the `Transport` interface in the MCP spec.
 */
interface MCPTransport {
  /**
   * Initialize and start the transport
   */
  start(): Promise<void>;
  /**
   * Send a JSON-RPC message through the transport
   * @param message The JSON-RPC message to send
   */
  send(message: JSONRPCMessage): Promise<void>;
  /**
   * Clean up and close the transport
   */
  close(): Promise<void>;
  /**
   * Event handler for transport closure
   */
  onclose?: () => void;
  /**
   * Event handler for transport errors
   */
  onerror?: (error: Error) => void;
  /**
   * Event handler for received messages
   */
  onmessage?: (message: JSONRPCMessage) => void;
}
type MCPTransportConfig = {
  type: 'sse';
  /**
   * The URL of the MCP server.
   */
  url: string;
  /**
   * Additional HTTP headers to be sent with requests.
   */
  headers?: Record<string, string>;
};

type ToolParameters<T = JSONObject> = z.Schema<T> | Schema<T>;
interface ToolExecutionOptions {
  /**
   * The ID of the tool call. You can use it e.g. when sending tool-call related information with stream data.
   */
  toolCallId: string;
  /**
   * Messages that were sent to the language model to initiate the response that contained the tool call.
   * The messages **do not** include the system prompt nor the assistant response that contained the tool call.
   */
  messages: ModelMessage[];
  /**
   * An optional abort signal that indicates that the overall operation should be aborted.
   */
  abortSignal?: AbortSignal;
}
type NeverOptional<N, T> = 0 extends 1 & N
  ? Partial<T>
  : [N] extends [never]
    ? Partial<Record<keyof T, undefined>>
    : T;
/**
A tool contains the description and the schema of the input that the tool expects.
This enables the language model to generate the input.

The tool can also contain an optional execute function for the actual execution function of the tool.
 */
type Tool<PARAMETERS extends JSONValue$1 | unknown | never = any, RESULT = any> = {
  /**
  An optional description of what the tool does.
  Will be used by the language model to decide whether to use the tool.
  Not used for provider-defined tools.
     */
  description?: string;
} & NeverOptional<
  PARAMETERS,
  {
    /**
The schema of the input that the tool expects. The language model will use this to generate the input.
It is also used to validate the output of the language model.
Use descriptions to make the input understandable for the language model.
   */
    parameters: ToolParameters<PARAMETERS>;
  }
> &
  NeverOptional<
    RESULT,
    {
      /**
An async function that is called with the arguments from the tool call and produces a result.
If not provided, the tool will not be executed automatically.

@args is the input of the tool call.
@options.abortSignal is a signal that can be used to abort the tool call.
    */
      execute: (
        args: [PARAMETERS] extends [never] ? undefined : PARAMETERS,
        options: ToolExecutionOptions,
      ) => PromiseLike<RESULT>;
      /**
Optional conversion function that maps the tool result to multi-part tool content for LLMs.
    */
      experimental_toToolResultContent?: (result: RESULT) => ToolResultContent;
    }
  > &
  (
    | {
        /**
Function tool.
 */
        type?: undefined | 'function';
      }
    | {
        /**
Provider-defined tool.
 */
        type: 'provider-defined';
        /**
The ID of the tool. Should follow the format `<provider-name>.<tool-name>`.
 */
        id: `${string}.${string}`;
        /**
The arguments for configuring the tool. Must match the expected arguments defined by the provider for this tool.
 */
        args: Record<string, unknown>;
      }
  );
/**
Helper function for inferring the execute args of a tool.
 */
declare function tool(tool: Tool<never, never>): Tool<never, never>;
declare function tool<PARAMETERS>(tool: Tool<PARAMETERS, never>): Tool<PARAMETERS, never>;
declare function tool<RESULT>(tool: Tool<never, RESULT>): Tool<never, RESULT>;
declare function tool<PARAMETERS, RESULT>(tool: Tool<PARAMETERS, RESULT>): Tool<PARAMETERS, RESULT>;
type MappedTool<T extends Tool | JSONObject, RESULT extends any> =
  T extends Tool<infer P> ? Tool<P, RESULT> : T extends JSONObject ? Tool<T, RESULT> : never;

type ToolSchemas =
  | Record<
      string,
      {
        parameters: ToolParameters<JSONObject | unknown>;
      }
    >
  | 'automatic'
  | undefined;
type McpToolSet<TOOL_SCHEMAS extends ToolSchemas = 'automatic'> =
  TOOL_SCHEMAS extends Record<
    string,
    {
      parameters: ToolParameters<any>;
    }
  >
    ? {
        [K in keyof TOOL_SCHEMAS]: MappedTool<TOOL_SCHEMAS[K], CallToolResult> &
          Required<Pick<MappedTool<TOOL_SCHEMAS[K], CallToolResult>, 'execute'>>;
      }
    : McpToolSet<
        Record<
          string,
          {
            parameters: ToolParameters<unknown>;
          }
        >
      >;
declare const CallToolResultSchema: z.ZodUnion<
  [
    z.ZodObject<
      {
        _meta: z.ZodOptional<
          z.ZodObject<
            {},
            'passthrough',
            z.ZodTypeAny,
            z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
            z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
          >
        >;
      } & {
        content: z.ZodArray<
          z.ZodUnion<
            [
              z.ZodObject<
                {
                  type: z.ZodLiteral<'text'>;
                  text: z.ZodString;
                },
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<
                  {
                    type: z.ZodLiteral<'text'>;
                    text: z.ZodString;
                  },
                  z.ZodTypeAny,
                  'passthrough'
                >,
                z.objectInputType<
                  {
                    type: z.ZodLiteral<'text'>;
                    text: z.ZodString;
                  },
                  z.ZodTypeAny,
                  'passthrough'
                >
              >,
              z.ZodObject<
                {
                  type: z.ZodLiteral<'image'>;
                  data: z.ZodString;
                  mimeType: z.ZodString;
                },
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<
                  {
                    type: z.ZodLiteral<'image'>;
                    data: z.ZodString;
                    mimeType: z.ZodString;
                  },
                  z.ZodTypeAny,
                  'passthrough'
                >,
                z.objectInputType<
                  {
                    type: z.ZodLiteral<'image'>;
                    data: z.ZodString;
                    mimeType: z.ZodString;
                  },
                  z.ZodTypeAny,
                  'passthrough'
                >
              >,
              z.ZodObject<
                {
                  type: z.ZodLiteral<'resource'>;
                  resource: z.ZodUnion<
                    [
                      z.ZodObject<
                        {
                          /**
                           * The URI of this resource.
                           */
                          uri: z.ZodString;
                          /**
                           * The MIME type of this resource, if known.
                           */
                          mimeType: z.ZodOptional<z.ZodString>;
                        } & {
                          text: z.ZodString;
                        },
                        'passthrough',
                        z.ZodTypeAny,
                        z.objectOutputType<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            text: z.ZodString;
                          },
                          z.ZodTypeAny,
                          'passthrough'
                        >,
                        z.objectInputType<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            text: z.ZodString;
                          },
                          z.ZodTypeAny,
                          'passthrough'
                        >
                      >,
                      z.ZodObject<
                        {
                          /**
                           * The URI of this resource.
                           */
                          uri: z.ZodString;
                          /**
                           * The MIME type of this resource, if known.
                           */
                          mimeType: z.ZodOptional<z.ZodString>;
                        } & {
                          blob: z.ZodString;
                        },
                        'passthrough',
                        z.ZodTypeAny,
                        z.objectOutputType<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            blob: z.ZodString;
                          },
                          z.ZodTypeAny,
                          'passthrough'
                        >,
                        z.objectInputType<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            blob: z.ZodString;
                          },
                          z.ZodTypeAny,
                          'passthrough'
                        >
                      >,
                    ]
                  >;
                },
                'passthrough',
                z.ZodTypeAny,
                z.objectOutputType<
                  {
                    type: z.ZodLiteral<'resource'>;
                    resource: z.ZodUnion<
                      [
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            text: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            blob: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                      ]
                    >;
                  },
                  z.ZodTypeAny,
                  'passthrough'
                >,
                z.objectInputType<
                  {
                    type: z.ZodLiteral<'resource'>;
                    resource: z.ZodUnion<
                      [
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            text: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            blob: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                      ]
                    >;
                  },
                  z.ZodTypeAny,
                  'passthrough'
                >
              >,
            ]
          >,
          'many'
        >;
        isError: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
      },
      'passthrough',
      z.ZodTypeAny,
      z.objectOutputType<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        } & {
          content: z.ZodArray<
            z.ZodUnion<
              [
                z.ZodObject<
                  {
                    type: z.ZodLiteral<'text'>;
                    text: z.ZodString;
                  },
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<
                    {
                      type: z.ZodLiteral<'text'>;
                      text: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >,
                  z.objectInputType<
                    {
                      type: z.ZodLiteral<'text'>;
                      text: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >
                >,
                z.ZodObject<
                  {
                    type: z.ZodLiteral<'image'>;
                    data: z.ZodString;
                    mimeType: z.ZodString;
                  },
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<
                    {
                      type: z.ZodLiteral<'image'>;
                      data: z.ZodString;
                      mimeType: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >,
                  z.objectInputType<
                    {
                      type: z.ZodLiteral<'image'>;
                      data: z.ZodString;
                      mimeType: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >
                >,
                z.ZodObject<
                  {
                    type: z.ZodLiteral<'resource'>;
                    resource: z.ZodUnion<
                      [
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            text: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            blob: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                      ]
                    >;
                  },
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<
                    {
                      type: z.ZodLiteral<'resource'>;
                      resource: z.ZodUnion<
                        [
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                        ]
                      >;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >,
                  z.objectInputType<
                    {
                      type: z.ZodLiteral<'resource'>;
                      resource: z.ZodUnion<
                        [
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                        ]
                      >;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >
                >,
              ]
            >,
            'many'
          >;
          isError: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        },
        z.ZodTypeAny,
        'passthrough'
      >,
      z.objectInputType<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        } & {
          content: z.ZodArray<
            z.ZodUnion<
              [
                z.ZodObject<
                  {
                    type: z.ZodLiteral<'text'>;
                    text: z.ZodString;
                  },
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<
                    {
                      type: z.ZodLiteral<'text'>;
                      text: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >,
                  z.objectInputType<
                    {
                      type: z.ZodLiteral<'text'>;
                      text: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >
                >,
                z.ZodObject<
                  {
                    type: z.ZodLiteral<'image'>;
                    data: z.ZodString;
                    mimeType: z.ZodString;
                  },
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<
                    {
                      type: z.ZodLiteral<'image'>;
                      data: z.ZodString;
                      mimeType: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >,
                  z.objectInputType<
                    {
                      type: z.ZodLiteral<'image'>;
                      data: z.ZodString;
                      mimeType: z.ZodString;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >
                >,
                z.ZodObject<
                  {
                    type: z.ZodLiteral<'resource'>;
                    resource: z.ZodUnion<
                      [
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            text: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                        z.ZodObject<
                          {
                            /**
                             * The URI of this resource.
                             */
                            uri: z.ZodString;
                            /**
                             * The MIME type of this resource, if known.
                             */
                            mimeType: z.ZodOptional<z.ZodString>;
                          } & {
                            blob: z.ZodString;
                          },
                          'passthrough',
                          z.ZodTypeAny,
                          z.objectOutputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >,
                          z.objectInputType<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            z.ZodTypeAny,
                            'passthrough'
                          >
                        >,
                      ]
                    >;
                  },
                  'passthrough',
                  z.ZodTypeAny,
                  z.objectOutputType<
                    {
                      type: z.ZodLiteral<'resource'>;
                      resource: z.ZodUnion<
                        [
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                        ]
                      >;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >,
                  z.objectInputType<
                    {
                      type: z.ZodLiteral<'resource'>;
                      resource: z.ZodUnion<
                        [
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              text: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                text: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                          z.ZodObject<
                            {
                              /**
                               * The URI of this resource.
                               */
                              uri: z.ZodString;
                              /**
                               * The MIME type of this resource, if known.
                               */
                              mimeType: z.ZodOptional<z.ZodString>;
                            } & {
                              blob: z.ZodString;
                            },
                            'passthrough',
                            z.ZodTypeAny,
                            z.objectOutputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >,
                            z.objectInputType<
                              {
                                /**
                                 * The URI of this resource.
                                 */
                                uri: z.ZodString;
                                /**
                                 * The MIME type of this resource, if known.
                                 */
                                mimeType: z.ZodOptional<z.ZodString>;
                              } & {
                                blob: z.ZodString;
                              },
                              z.ZodTypeAny,
                              'passthrough'
                            >
                          >,
                        ]
                      >;
                    },
                    z.ZodTypeAny,
                    'passthrough'
                  >
                >,
              ]
            >,
            'many'
          >;
          isError: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        },
        z.ZodTypeAny,
        'passthrough'
      >
    >,
    z.ZodObject<
      {
        _meta: z.ZodOptional<
          z.ZodObject<
            {},
            'passthrough',
            z.ZodTypeAny,
            z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
            z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
          >
        >;
      } & {
        toolResult: z.ZodUnknown;
      },
      'passthrough',
      z.ZodTypeAny,
      z.objectOutputType<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        } & {
          toolResult: z.ZodUnknown;
        },
        z.ZodTypeAny,
        'passthrough'
      >,
      z.objectInputType<
        {
          _meta: z.ZodOptional<
            z.ZodObject<
              {},
              'passthrough',
              z.ZodTypeAny,
              z.objectOutputType<{}, z.ZodTypeAny, 'passthrough'>,
              z.objectInputType<{}, z.ZodTypeAny, 'passthrough'>
            >
          >;
        } & {
          toolResult: z.ZodUnknown;
        },
        z.ZodTypeAny,
        'passthrough'
      >
    >,
  ]
>;
type CallToolResult = z.infer<typeof CallToolResultSchema>;

interface MCPClientConfig {
  /** Transport configuration for connecting to the MCP server */
  transport: MCPTransportConfig | MCPTransport;
  /** Optional callback for uncaught errors */
  onUncaughtError?: (error: unknown) => void;
  /** Optional client name, defaults to 'ai-sdk-mcp-client' */
  name?: string;
}
declare function createMCPClient(config: MCPClientConfig): Promise<MCPClient>;
/**
 * A lightweight MCP Client implementation
 *
 * The primary purpose of this client is tool conversion between MCP<>AI SDK
 * but can later be extended to support other MCP features
 *
 * Tool parameters are automatically inferred from the server's JSON schema
 * if not explicitly provided in the tools configuration
 *
 * This client is meant to be used to communicate with a single server. To communicate and fetch tools across multiple servers, it's recommended to create a new client instance per server.
 *
 * Not supported:
 * - Client options (e.g. sampling, roots) as they are not needed for tool conversion
 * - Accepting notifications
 * - Session management (when passing a sessionId to an instance of the Streamable HTTP transport)
 * - Resumable SSE streams
 */
declare class MCPClient {
  private transport;
  private onUncaughtError?;
  private clientInfo;
  private requestMessageId;
  private responseHandlers;
  private serverCapabilities;
  private isClosed;
  constructor({ transport: transportConfig, name, onUncaughtError }: MCPClientConfig);
  init(): Promise<this>;
  close(): Promise<void>;
  private assertCapability;
  private request;
  private listTools;
  private callTool;
  private notification;
  /**
   * Returns a set of AI SDK tools from the MCP server
   * @returns A record of tool names to their implementations
   */
  tools<TOOL_SCHEMAS extends ToolSchemas = 'automatic'>({
    schemas,
  }?: {
    schemas?: TOOL_SCHEMAS;
  }): Promise<McpToolSet<TOOL_SCHEMAS>>;
  private onClose;
  private onError;
  private onResponse;
}

type ToolSet = Record<
  string,
  (Tool<never, never> | Tool<any, any> | Tool<any, never> | Tool<never, any>) &
    Pick<Tool<any, any>, 'execute'>
>;

type ToolCallUnion<TOOLS extends ToolSet> = ValueOf<{
  [NAME in keyof TOOLS]: {
    type: 'tool-call';
    toolCallId: string;
    toolName: NAME & string;
    args: TOOLS[NAME] extends Tool<infer PARAMETERS> ? PARAMETERS : never;
  };
}>;
type ToolCallArray<TOOLS extends ToolSet> = Array<ToolCallUnion<TOOLS>>;

type ToToolsWithDefinedExecute<TOOLS extends ToolSet> = {
  [K in keyof TOOLS as TOOLS[K]['execute'] extends undefined ? never : K]: TOOLS[K];
};
type ToToolResultObject<TOOLS extends ToolSet> = ValueOf<{
  [NAME in keyof TOOLS]: {
    type: 'tool-result';
    toolCallId: string;
    toolName: NAME & string;
    args: TOOLS[NAME] extends Tool<infer P> ? P : never;
    result: Awaited<ReturnType<Exclude<TOOLS[NAME]['execute'], undefined>>>;
  };
}>;
type ToolResultUnion<TOOLS extends ToolSet> = ToToolResultObject<ToToolsWithDefinedExecute<TOOLS>>;
type ToolResultArray<TOOLS extends ToolSet> = Array<ToolResultUnion<TOOLS>>;

type ContentPart<TOOLS extends ToolSet> =
  | {
      type: 'text';
      text: string;
    }
  | {
      type: 'reasoning';
      text: string;
      providerMetadata?: ProviderMetadata;
    }
  | ({
      type: 'source';
    } & Source)
  | {
      type: 'file';
      file: GeneratedFile;
    }
  | ({
      type: 'tool-call';
    } & ToolCallUnion<TOOLS>)
  | ({
      type: 'tool-result';
    } & ToolResultUnion<TOOLS>);

declare const symbol$e: unique symbol;
declare class InvalidToolArgumentsError extends AISDKError {
  private readonly [symbol$e];
  readonly toolName: string;
  readonly toolArgs: string;
  constructor({
    toolArgs,
    toolName,
    cause,
    message,
  }: {
    message?: string;
    toolArgs: string;
    toolName: string;
    cause: unknown;
  });
  static isInstance(error: unknown): error is InvalidToolArgumentsError;
}

declare const symbol$d: unique symbol;
declare class NoSuchToolError extends AISDKError {
  private readonly [symbol$d];
  readonly toolName: string;
  readonly availableTools: string[] | undefined;
  constructor({
    toolName,
    availableTools,
    message,
  }: {
    toolName: string;
    availableTools?: string[] | undefined;
    message?: string;
  });
  static isInstance(error: unknown): error is NoSuchToolError;
}

type CallSettings = {
  /**
  Maximum number of tokens to generate.
     */
  maxOutputTokens?: number;
  /**
  Temperature setting. The range depends on the provider and model.
  
  It is recommended to set either `temperature` or `topP`, but not both.
     */
  temperature?: number;
  /**
  Nucleus sampling. This is a number between 0 and 1.
  
  E.g. 0.1 would mean that only tokens with the top 10% probability mass
  are considered.
  
  It is recommended to set either `temperature` or `topP`, but not both.
     */
  topP?: number;
  /**
  Only sample from the top K options for each subsequent token.
  
  Used to remove "long tail" low probability responses.
  Recommended for advanced use cases only. You usually only need to use temperature.
     */
  topK?: number;
  /**
  Presence penalty setting. It affects the likelihood of the model to
  repeat information that is already in the prompt.
  
  The presence penalty is a number between -1 (increase repetition)
  and 1 (maximum penalty, decrease repetition). 0 means no penalty.
     */
  presencePenalty?: number;
  /**
  Frequency penalty setting. It affects the likelihood of the model
  to repeatedly use the same words or phrases.
  
  The frequency penalty is a number between -1 (increase repetition)
  and 1 (maximum penalty, decrease repetition). 0 means no penalty.
     */
  frequencyPenalty?: number;
  /**
  Stop sequences.
  If set, the model will stop generating text when one of the stop sequences is generated.
  Providers may have limits on the number of stop sequences.
     */
  stopSequences?: string[];
  /**
  The seed (integer) to use for random sampling. If set and supported
  by the model, calls will generate deterministic results.
     */
  seed?: number;
  /**
  Maximum number of retries. Set to 0 to disable retries.
  
  @default 2
     */
  maxRetries?: number;
  /**
  Abort signal.
     */
  abortSignal?: AbortSignal;
  /**
  Additional HTTP headers to be sent with the request.
  Only applicable for HTTP-based providers.
     */
  headers?: Record<string, string | undefined>;
};

/**
Prompt part of the AI function options.
It contains a system message, a simple text prompt, or a list of messages.
 */
type Prompt = {
  /**
  System message to include in the prompt. Can be used with `prompt` or `messages`.
     */
  system?: string;
  /**
  A prompt. It can be either a text prompt or a list of messages.
  
  You can either use `prompt` or `messages` but not both.
  */
  prompt?: string | Array<ModelMessage>;
  /**
  A list of messages.
  
  You can either use `prompt` or `messages` but not both.
     */
  messages?: Array<ModelMessage>;
};

/**
 * A function that attempts to repair a tool call that failed to parse.
 *
 * It receives the error and the context as arguments and returns the repair
 * tool call JSON as text.
 *
 * @param options.system - The system prompt.
 * @param options.messages - The messages in the current generation step.
 * @param options.toolCall - The tool call that failed to parse.
 * @param options.tools - The tools that are available.
 * @param options.parameterSchema - A function that returns the JSON Schema for a tool.
 * @param options.error - The error that occurred while parsing the tool call.
 */
type ToolCallRepairFunction<TOOLS extends ToolSet> = (options: {
  system: string | undefined;
  messages: ModelMessage[];
  toolCall: LanguageModelV2ToolCall;
  tools: TOOLS;
  parameterSchema: (options: { toolName: string }) => JSONSchema7;
  error: NoSuchToolError | InvalidToolArgumentsError;
}) => Promise<LanguageModelV2ToolCall | null>;

type SingleRequestTextStreamPart<TOOLS extends ToolSet> =
  | ContentPart<TOOLS>
  | {
      type: 'stream-start';
      warnings: LanguageModelV2CallWarning[];
    }
  | {
      type: 'reasoning-part-finish';
    }
  | {
      type: 'tool-call-streaming-start';
      toolCallId: string;
      toolName: string;
    }
  | {
      type: 'tool-call-delta';
      toolCallId: string;
      toolName: string;
      argsTextDelta: string;
    }
  | {
      type: 'response-metadata';
      id?: string;
      timestamp?: Date;
      modelId?: string;
    }
  | {
      type: 'finish';
      finishReason: FinishReason;
      usage: LanguageModelUsage;
      providerMetadata?: ProviderMetadata;
    }
  | {
      type: 'error';
      error: unknown;
    };

declare const symbol$c: unique symbol;
declare class InvalidStreamPartError extends AISDKError {
  private readonly [symbol$c];
  readonly chunk: SingleRequestTextStreamPart<any>;
  constructor({ chunk, message }: { chunk: SingleRequestTextStreamPart<any>; message: string });
  static isInstance(error: unknown): error is InvalidStreamPartError;
}

declare const symbol$b: unique symbol;
/**
 * An error occurred with the MCP client.
 */
declare class MCPClientError extends AISDKError {
  private readonly [symbol$b];
  constructor({ name, message, cause }: { name?: string; message: string; cause?: unknown });
  static isInstance(error: unknown): error is MCPClientError;
}

declare const symbol$a: unique symbol;
/**
Thrown when no image could be generated. This can have multiple causes:

- The model failed to generate a response.
- The model generated a response that could not be parsed.
 */
declare class NoImageGeneratedError extends AISDKError {
  private readonly [symbol$a];
  /**
  The response metadata for each call.
     */
  readonly responses: Array<ImageModelResponseMetadata> | undefined;
  constructor({
    message,
    cause,
    responses,
  }: {
    message?: string;
    cause?: Error;
    responses?: Array<ImageModelResponseMetadata>;
  });
  static isInstance(error: unknown): error is NoImageGeneratedError;
}

declare const symbol$9: unique symbol;
/**
Thrown when no object could be generated. This can have several causes:

- The model failed to generate a response.
- The model generated a response that could not be parsed.
- The model generated a response that could not be validated against the schema.

The error contains the following properties:

- `text`: The text that was generated by the model. This can be the raw text or the tool call text, depending on the model.
 */
declare class NoObjectGeneratedError extends AISDKError {
  private readonly [symbol$9];
  /**
    The text that was generated by the model. This can be the raw text or the tool call text, depending on the model.
     */
  readonly text: string | undefined;
  /**
    The response metadata.
     */
  readonly response: LanguageModelResponseMetadata | undefined;
  /**
    The usage of the model.
     */
  readonly usage: LanguageModelUsage | undefined;
  /**
    Reason why the model finished generating a response.
     */
  readonly finishReason: FinishReason | undefined;
  constructor({
    message,
    cause,
    text,
    response,
    usage,
    finishReason,
  }: {
    message?: string;
    cause?: Error;
    text?: string;
    response: LanguageModelResponseMetadata;
    usage: LanguageModelUsage;
    finishReason: FinishReason;
  });
  static isInstance(error: unknown): error is NoObjectGeneratedError;
}

declare const symbol$8: unique symbol;
/**
Thrown when no output type is specified and output-related methods are called.
 */
declare class NoOutputSpecifiedError extends AISDKError {
  private readonly [symbol$8];
  constructor({ message }?: { message?: string });
  static isInstance(error: unknown): error is NoOutputSpecifiedError;
}

declare const symbol$7: unique symbol;
declare class ToolCallRepairError extends AISDKError {
  private readonly [symbol$7];
  readonly originalError: NoSuchToolError | InvalidToolArgumentsError;
  constructor({
    cause,
    originalError,
    message,
  }: {
    message?: string;
    cause: unknown;
    originalError: NoSuchToolError | InvalidToolArgumentsError;
  });
  static isInstance(error: unknown): error is ToolCallRepairError;
}

declare const symbol$6: unique symbol;
declare class ToolExecutionError extends AISDKError {
  private readonly [symbol$6];
  readonly toolName: string;
  readonly toolArgs: JSONValue$1 | unknown;
  readonly toolCallId: string;
  constructor({
    toolArgs,
    toolName,
    toolCallId,
    cause,
    message,
  }: {
    message?: string;
    toolArgs: JSONValue$1 | unknown;
    toolName: string;
    toolCallId: string;
    cause: unknown;
  });
  static isInstance(error: unknown): error is ToolExecutionError;
}

declare const symbol$5: unique symbol;
declare class InvalidDataContentError extends AISDKError {
  private readonly [symbol$5];
  readonly content: unknown;
  constructor({ content, cause, message }: { content: unknown; cause?: unknown; message?: string });
  static isInstance(error: unknown): error is InvalidDataContentError;
}

declare const symbol$4: unique symbol;
declare class InvalidMessageRoleError extends AISDKError {
  private readonly [symbol$4];
  readonly role: string;
  constructor({ role, message }: { role: string; message?: string });
  static isInstance(error: unknown): error is InvalidMessageRoleError;
}

/**
Tool invocations are either tool calls or tool results. For each assistant tool call,
there is one tool invocation. While the call is in progress, the invocation is a tool call.
Once the call is complete, the invocation is a tool result.

The step is used to track how to map an assistant UI message with many tool invocations
back to a sequence of LLM assistant/tool result message pairs.
It is optional for backwards compatibility.
 */
type ToolInvocation =
  | ({
      state: 'partial-call';
      step?: number;
    } & ToolCall<string, any>)
  | ({
      state: 'call';
      step?: number;
    } & ToolCall<string, any>)
  | ({
      state: 'result';
      step?: number;
    } & ToolResult<string, any, any>);
/**
The data types that can be used in the UI message for the UI message data parts.
 */
type UIDataTypes = Record<string, unknown>;
/**
AI SDK UI Messages. They are used in the client and to communicate between the frontend and the API routes.
 */
interface UIMessage<METADATA = unknown, DATA_PARTS extends UIDataTypes = UIDataTypes> {
  /**
  A unique identifier for the message.
     */
  id: string;
  /**
  The role of the message.
     */
  role: 'system' | 'user' | 'assistant';
  /**
  The metadata of the message.
     */
  metadata?: METADATA;
  /**
  The parts of the message. Use this for rendering the message in the UI.
  
  System messages should be avoided (set the system prompt on the server instead).
  They can have text parts.
  
  User messages can have text parts and file parts.
  
  Assistant messages can have text, reasoning, tool invocation, and file parts.
     */
  parts: Array<UIMessagePart<DATA_PARTS>>;
}
type UIMessagePart<DATA_TYPES extends UIDataTypes> =
  | TextUIPart
  | ReasoningUIPart
  | ToolInvocationUIPart
  | SourceUIPart
  | FileUIPart
  | DataUIPart<DATA_TYPES>
  | StepStartUIPart;
type DataUIPart<DATA_TYPES extends UIDataTypes> = ValueOf<{
  [NAME in keyof DATA_TYPES & string]: {
    type: `data-${NAME}`;
    id?: string;
    value: DATA_TYPES[NAME];
  };
}>;
/**
 * A text part of a message.
 */
type TextUIPart = {
  type: 'text';
  /**
   * The text content.
   */
  text: string;
};
/**
 * A reasoning part of a message.
 */
type ReasoningUIPart = {
  type: 'reasoning';
  /**
   * The reasoning text.
   */
  text: string;
  /**
   * The provider metadata.
   */
  providerMetadata?: Record<string, any>;
};
/**
 * A tool invocation part of a message.
 */
type ToolInvocationUIPart = {
  type: 'tool-invocation';
  /**
   * The tool invocation.
   */
  toolInvocation: ToolInvocation;
};
/**
 * A source part of a message.
 */
type SourceUIPart = {
  type: 'source';
  /**
   * The source.
   */
  source: {
    sourceType: 'url';
    id: string;
    url: string;
    title?: string;
    providerMetadata?: Record<string, any>;
  };
};
/**
 * A file part of a message.
 */
type FileUIPart = {
  type: 'file';
  /**
   * IANA media type of the file.
   *
   * @see https://www.iana.org/assignments/media-types/media-types.xhtml
   */
  mediaType: string;
  /**
   * Optional filename of the file.
   */
  filename?: string;
  /**
   * The URL of the file.
   * It can either be a URL to a hosted file or a [Data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs).
   */
  url: string;
};
/**
 * A step boundary part of a message.
 */
type StepStartUIPart = {
  type: 'step-start';
};
type CreateUIMessage<METADATA = unknown, DATA_TYPES extends UIDataTypes = UIDataTypes> = Omit<
  UIMessage<METADATA, DATA_TYPES>,
  'id'
> & {
  id?: UIMessage<METADATA, DATA_TYPES>['id'];
};

declare const symbol$3: unique symbol;
declare class MessageConversionError extends AISDKError {
  private readonly [symbol$3];
  readonly originalMessage: Omit<UIMessage, 'id'>;
  constructor({
    originalMessage,
    message,
  }: {
    originalMessage: Omit<UIMessage, 'id'>;
    message: string;
  });
  static isInstance(error: unknown): error is MessageConversionError;
}

declare const symbol$2: unique symbol;
declare class DownloadError extends AISDKError {
  private readonly [symbol$2];
  readonly url: string;
  readonly statusCode?: number;
  readonly statusText?: string;
  constructor({
    url,
    statusCode,
    statusText,
    cause,
    message,
  }: {
    url: string;
    statusCode?: number;
    statusText?: string;
    message?: string;
    cause?: unknown;
  });
  static isInstance(error: unknown): error is DownloadError;
}

declare const symbol$1: unique symbol;
type RetryErrorReason = 'maxRetriesExceeded' | 'errorNotRetryable' | 'abort';
declare class RetryError extends AISDKError {
  private readonly [symbol$1];
  readonly reason: RetryErrorReason;
  readonly lastError: unknown;
  readonly errors: Array<unknown>;
  constructor({
    message,
    reason,
    errors,
  }: {
    message: string;
    reason: RetryErrorReason;
    errors: Array<unknown>;
  });
  static isInstance(error: unknown): error is RetryError;
}

declare function createTextStreamResponse({
  status,
  statusText,
  headers,
  textStream,
}: ResponseInit & {
  textStream: ReadableStream<string>;
}): Response;

declare function pipeTextStreamToResponse({
  response,
  status,
  statusText,
  headers,
  textStream,
}: {
  response: ServerResponse;
  textStream: ReadableStream<string>;
} & ResponseInit): void;

/**
 * Appends a client message to the messages array.
 * If the last message in the array has the same id as the new message, it will be replaced.
 * Otherwise, the new message will be appended.
 */
declare function appendClientMessage({
  messages,
  message,
}: {
  messages: UIMessage[];
  message: UIMessage;
}): UIMessage<unknown, UIDataTypes>[];

/**
The result of an `embed` call.
It contains the embedding, the value, and additional information.
 */
interface EmbedResult<VALUE> {
  /**
    The value that was embedded.
       */
  readonly value: VALUE;
  /**
    The embedding of the value.
      */
  readonly embedding: Embedding;
  /**
    The embedding token usage.
      */
  readonly usage: EmbeddingModelUsage;
  /**
    Optional response data.
       */
  readonly response?: {
    /**
      Response headers.
           */
    headers?: Record<string, string>;
    /**
        The response body.
        */
    body?: unknown;
  };
}

/**
Embed a value using an embedding model. The type of the value is defined by the embedding model.

@param model - The embedding model to use.
@param value - The value that should be embedded.

@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@returns A result object that contains the embedding, the value, and additional information.
 */
declare function embed<VALUE>({
  model,
  value,
  providerOptions,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
  experimental_telemetry: telemetry,
}: {
  /**
  The embedding model to use.
       */
  model: EmbeddingModel<VALUE>;
  /**
  The value that should be embedded.
     */
  value: VALUE;
  /**
  Maximum number of retries per embedding model call. Set to 0 to disable retries.
  
  @default 2
     */
  maxRetries?: number;
  /**
  Abort signal.
   */
  abortSignal?: AbortSignal;
  /**
  Additional headers to include in the request.
  Only applicable for HTTP-based providers.
   */
  headers?: Record<string, string>;
  /**
    Additional provider-specific options. They are passed through
    to the provider from the AI SDK and enable provider-specific
    functionality that can be fully encapsulated in the provider.
    */
  providerOptions?: ProviderOptions;
  /**
   * Optional telemetry configuration (experimental).
   */
  experimental_telemetry?: TelemetrySettings;
}): Promise<EmbedResult<VALUE>>;

/**
The result of a `embedMany` call.
It contains the embeddings, the values, and additional information.
 */
interface EmbedManyResult<VALUE> {
  /**
    The values that were embedded.
       */
  readonly values: Array<VALUE>;
  /**
    The embeddings. They are in the same order as the values.
      */
  readonly embeddings: Array<Embedding>;
  /**
    The embedding token usage.
      */
  readonly usage: EmbeddingModelUsage;
  /**
    Optional raw response data.
       */
  readonly responses?: Array<
    | {
        /**
  Response headers.
       */
        headers?: Record<string, string>;
        /**
    The response body.
    */
        body?: unknown;
      }
    | undefined
  >;
}

/**
Embed several values using an embedding model. The type of the value is defined
by the embedding model.

`embedMany` automatically splits large requests into smaller chunks if the model
has a limit on how many embeddings can be generated in a single call.

@param model - The embedding model to use.
@param values - The values that should be embedded.

@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@returns A result object that contains the embeddings, the value, and additional information.
 */
declare function embedMany<VALUE>({
  model,
  values,
  maxParallelCalls,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
  providerOptions,
  experimental_telemetry: telemetry,
}: {
  /**
  The embedding model to use.
       */
  model: EmbeddingModel<VALUE>;
  /**
  The values that should be embedded.
     */
  values: Array<VALUE>;
  /**
  Maximum number of retries per embedding model call. Set to 0 to disable retries.
  
  @default 2
     */
  maxRetries?: number;
  /**
  Abort signal.
   */
  abortSignal?: AbortSignal;
  /**
  Additional headers to include in the request.
  Only applicable for HTTP-based providers.
   */
  headers?: Record<string, string>;
  /**
   * Optional telemetry configuration (experimental).
   */
  experimental_telemetry?: TelemetrySettings;
  /**
    Additional provider-specific options. They are passed through
    to the provider from the AI SDK and enable provider-specific
    functionality that can be fully encapsulated in the provider.
    */
  providerOptions?: ProviderOptions;
  /**
   * Maximum number of concurrent requests.
   *
   * @default Infinity
   */
  maxParallelCalls?: number;
}): Promise<EmbedManyResult<VALUE>>;

/**
A message that was generated during the generation process.
It can be either an assistant message or a tool message.
 */
type ResponseMessage = AssistantModelMessage | ToolModelMessage;

/**
 * The result of a single step in the generation process.
 */
type StepResult<TOOLS extends ToolSet> = {
  /**
  The content that was generated in the last step.
     */
  readonly content: Array<ContentPart<TOOLS>>;
  /**
  The generated text.
  */
  readonly text: string;
  /**
  The reasoning that was generated during the generation.
  */
  readonly reasoning: Array<ReasoningPart>;
  /**
  The reasoning text that was generated during the generation.
  */
  readonly reasoningText: string | undefined;
  /**
  The files that were generated during the generation.
  */
  readonly files: Array<GeneratedFile>;
  /**
  The sources that were used to generate the text.
  */
  readonly sources: Array<Source>;
  /**
  The tool calls that were made during the generation.
  */
  readonly toolCalls: ToolCallArray<TOOLS>;
  /**
  The results of the tool calls.
  */
  readonly toolResults: ToolResultArray<TOOLS>;
  /**
  The reason why the generation finished.
  */
  readonly finishReason: FinishReason;
  /**
  The token usage of the generated text.
  */
  readonly usage: LanguageModelUsage;
  /**
  Warnings from the model provider (e.g. unsupported settings).
  */
  readonly warnings: CallWarning[] | undefined;
  /**
  Additional request information.
     */
  readonly request: LanguageModelRequestMetadata;
  /**
  Additional response information.
  */
  readonly response: LanguageModelResponseMetadata & {
    /**
    The response messages that were generated during the call.
    Response messages can be either assistant messages or tool messages.
    They contain a generated id.
    */
    readonly messages: Array<ResponseMessage>;
    /**
    Response body (available only for providers that use HTTP requests).
         */
    body?: unknown;
  };
  /**
  Additional provider-specific metadata. They are passed through
  from the provider to the AI SDK and enable provider-specific
  results that can be fully encapsulated in the provider.
     */
  readonly providerMetadata: ProviderMetadata | undefined;
};

/**
The result of a `generateText` call.
It contains the generated text, the tool calls that were made during the generation, and the results of the tool calls.
 */
interface GenerateTextResult<TOOLS extends ToolSet, OUTPUT> {
  /**
  The content that was generated in the last step.
     */
  readonly content: Array<ContentPart<TOOLS>>;
  /**
  The text that was generated in the last step.
       */
  readonly text: string;
  /**
  The full reasoning that the model has generated in the last step.
     */
  readonly reasoning: Array<ReasoningPart>;
  /**
  The reasoning text that the model has generated in the last step. Can be undefined if the model
  has only generated text.
     */
  readonly reasoningText: string | undefined;
  /**
  The files that were generated in the last step.
  Empty array if no files were generated.
       */
  readonly files: Array<GeneratedFile>;
  /**
  Sources that have been used as references in the last step.
     */
  readonly sources: Array<Source>;
  /**
  The tool calls that were made in the last step.
     */
  readonly toolCalls: ToolCallArray<TOOLS>;
  /**
  The results of the tool calls from the last step.
     */
  readonly toolResults: ToolResultArray<TOOLS>;
  /**
  The reason why the generation finished.
     */
  readonly finishReason: FinishReason;
  /**
  The token usage of the last step.
     */
  readonly usage: LanguageModelUsage;
  /**
  The total token usage of all steps.
  When there are multiple steps, the usage is the sum of all step usages.
     */
  readonly totalUsage: LanguageModelUsage;
  /**
  Warnings from the model provider (e.g. unsupported settings)
     */
  readonly warnings: CallWarning[] | undefined;
  /**
  Additional request information.
     */
  readonly request: LanguageModelRequestMetadata;
  /**
  Additional response information.
     */
  readonly response: LanguageModelResponseMetadata & {
    /**
    The response messages that were generated during the call. It consists of an assistant message,
    potentially containing tool calls.
    
    When there are tool results, there is an additional tool message with the tool results that are available.
    If there are tools that do not have execute functions, they are not included in the tool results and
    need to be added separately.
           */
    messages: Array<ResponseMessage>;
    /**
    Response body (available only for providers that use HTTP requests).
         */
    body?: unknown;
  };
  /**
  Additional provider-specific metadata. They are passed through
  from the provider to the AI SDK and enable provider-specific
  results that can be fully encapsulated in the provider.
     */
  readonly providerMetadata: ProviderMetadata | undefined;
  /**
  Details for all steps.
  You can use this to get information about intermediate steps,
  such as the tool calls or the response headers.
     */
  readonly steps: Array<StepResult<TOOLS>>;
  /**
  The generated structured output. It uses the `experimental_output` specification.
     */
  readonly experimental_output: OUTPUT;
}

/**
Create a type from an object with all keys and nested keys set to optional.
The helper supports normal objects and Zod schemas (which are resolved automatically).
It always recurses into arrays.

Adopted from [type-fest](https://github.com/sindresorhus/type-fest/tree/main) PartialDeep.
 */
type DeepPartial<T> = T extends z.ZodTypeAny
  ? DeepPartialInternal<z.infer<T>>
  : DeepPartialInternal<T>;
type DeepPartialInternal<T> = T extends
  | null
  | undefined
  | string
  | number
  | boolean
  | symbol
  | bigint
  | void
  | Date
  | RegExp
  | ((...arguments_: any[]) => unknown)
  | (new (...arguments_: any[]) => unknown)
  ? T
  : T extends Map<infer KeyType, infer ValueType>
    ? PartialMap<KeyType, ValueType>
    : T extends Set<infer ItemType>
      ? PartialSet<ItemType>
      : T extends ReadonlyMap<infer KeyType, infer ValueType>
        ? PartialReadonlyMap<KeyType, ValueType>
        : T extends ReadonlySet<infer ItemType>
          ? PartialReadonlySet<ItemType>
          : T extends object
            ? T extends ReadonlyArray<infer ItemType>
              ? ItemType[] extends T
                ? readonly ItemType[] extends T
                  ? ReadonlyArray<DeepPartialInternal<ItemType | undefined>>
                  : Array<DeepPartialInternal<ItemType | undefined>>
                : PartialObject<T>
              : PartialObject<T>
            : unknown;
type PartialMap<KeyType, ValueType> = {} & Map<
  DeepPartialInternal<KeyType>,
  DeepPartialInternal<ValueType>
>;
type PartialSet<T> = {} & Set<DeepPartialInternal<T>>;
type PartialReadonlyMap<KeyType, ValueType> = {} & ReadonlyMap<
  DeepPartialInternal<KeyType>,
  DeepPartialInternal<ValueType>
>;
type PartialReadonlySet<T> = {} & ReadonlySet<DeepPartialInternal<T>>;
type PartialObject<ObjectType extends object> = {
  [KeyType in keyof ObjectType]?: DeepPartialInternal<ObjectType[KeyType]>;
};

interface Output$1<OUTPUT, PARTIAL> {
  readonly type: 'object' | 'text';
  responseFormat: LanguageModelV2CallOptions['responseFormat'];
  parsePartial(options: { text: string }): Promise<
    | {
        partial: PARTIAL;
      }
    | undefined
  >;
  parseOutput(
    options: {
      text: string;
    },
    context: {
      response: LanguageModelResponseMetadata;
      usage: LanguageModelUsage;
      finishReason: FinishReason;
    },
  ): Promise<OUTPUT>;
}
declare const text: () => Output$1<string, string>;
declare const object: <OUTPUT>({
  schema: inputSchema,
}: {
  schema: z.Schema<OUTPUT, z.ZodTypeDef, any> | Schema<OUTPUT>;
}) => Output$1<OUTPUT, DeepPartial<OUTPUT>>;

declare const output_object: typeof object;
declare const output_text: typeof text;
declare namespace output {
  export { Output$1 as Output, output_object as object, output_text as text };
}

type StopCondition<TOOLS extends ToolSet> = (options: {
  steps: Array<StepResult<TOOLS>>;
}) => PromiseLike<boolean> | boolean;
declare function maxSteps(maxSteps: number): StopCondition<any>;
declare function hasToolCall(toolName: string): StopCondition<any>;

/**
Callback that is set using the `onStepFinish` option.

@param stepResult - The result of the step.
 */
type GenerateTextOnStepFinishCallback<TOOLS extends ToolSet> = (
  stepResult: StepResult<TOOLS>,
) => Promise<void> | void;
/**
Generate a text and call tools for a given prompt using a language model.

This function does not stream the output. If you want to stream the output, use `streamText` instead.

@param model - The language model to use.

@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.
@param toolChoice - The tool choice strategy. Default: 'auto'.

@param system - A system message that will be part of the prompt.
@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.
@param messages - A list of messages. You can either use `prompt` or `messages` but not both.

@param maxOutputTokens - Maximum number of tokens to generate.
@param temperature - Temperature setting.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topP - Nucleus sampling.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topK - Only sample from the top K options for each subsequent token.
Used to remove "long tail" low probability responses.
Recommended for advanced use cases only. You usually only need to use temperature.
@param presencePenalty - Presence penalty setting.
It affects the likelihood of the model to repeat information that is already in the prompt.
The value is passed through to the provider. The range depends on the provider and model.
@param frequencyPenalty - Frequency penalty setting.
It affects the likelihood of the model to repeatedly use the same words or phrases.
The value is passed through to the provider. The range depends on the provider and model.
@param stopSequences - Stop sequences.
If set, the model will stop generating text when one of the stop sequences is generated.
@param seed - The seed (integer) to use for random sampling.
If set and supported by the model, calls will generate deterministic results.

@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@param experimental_generateMessageId - Generate a unique ID for each message.

@param onStepFinish - Callback that is called when each step (LLM call) is finished, including intermediate steps.

@returns
A result object that contains the generated text, the results of the tool calls, and additional information.
 */
declare function generateText<TOOLS extends ToolSet, OUTPUT = never, OUTPUT_PARTIAL = never>({
  model,
  tools,
  toolChoice,
  system,
  prompt,
  messages,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
  continueUntil,
  experimental_output: output,
  experimental_telemetry: telemetry,
  providerOptions,
  experimental_activeTools: activeTools,
  experimental_prepareStep: prepareStep,
  experimental_repairToolCall: repairToolCall,
  _internal: { generateId, currentDate },
  onStepFinish,
  ...settings
}: CallSettings &
  Prompt & {
    /**
The language model to use.
     */
    model: LanguageModel;
    /**
The tools that the model can call. The model needs to support calling tools.
*/
    tools?: TOOLS;
    /**
The tool choice strategy. Default: 'auto'.
     */
    toolChoice?: ToolChoice<NoInfer<TOOLS>>;
    continueUntil?: StopCondition<NoInfer<TOOLS>>;
    /**
Optional telemetry configuration (experimental).
     */
    experimental_telemetry?: TelemetrySettings;
    /**
Additional provider-specific options. They are passed through
to the provider from the AI SDK and enable provider-specific
functionality that can be fully encapsulated in the provider.
 */
    providerOptions?: ProviderOptions;
    /**
Limits the tools that are available for the model to call without
changing the tool call and result types in the result.
     */
    experimental_activeTools?: Array<keyof NoInfer<TOOLS>>;
    /**
Optional specification for parsing structured outputs from the LLM response.
     */
    experimental_output?: Output$1<OUTPUT, OUTPUT_PARTIAL>;
    /**
Optional function that you can use to provide different settings for a step.

@param options - The options for the step.
@param options.steps - The steps that have been executed so far.
@param options.stepNumber - The number of the step that is being executed.
@param options.model - The model that is being used.

@returns An object that contains the settings for the step.
If you return undefined (or for undefined settings), the settings from the outer level will be used.
    */
    experimental_prepareStep?: (options: {
      steps: Array<StepResult<NoInfer<TOOLS>>>;
      stepNumber: number;
      model: LanguageModel;
    }) => PromiseLike<
      | {
          model?: LanguageModel;
          toolChoice?: ToolChoice<NoInfer<TOOLS>>;
          experimental_activeTools?: Array<keyof NoInfer<TOOLS>>;
        }
      | undefined
    >;
    /**
A function that attempts to repair a tool call that failed to parse.
     */
    experimental_repairToolCall?: ToolCallRepairFunction<NoInfer<TOOLS>>;
    /**
    Callback that is called when each step (LLM call) is finished, including intermediate steps.
    */
    onStepFinish?: GenerateTextOnStepFinishCallback<NoInfer<TOOLS>>;
    /**
     * Internal. For test use only. May change without notice.
     */
    _internal?: {
      generateId?: IdGenerator;
      currentDate?: () => Date;
    };
  }): Promise<GenerateTextResult<TOOLS, OUTPUT>>;

type AsyncIterableStream<T> = AsyncIterable<T> & ReadableStream<T>;

type UIMessageStreamOptions = {
  /**
   * Message ID that is sent to the client if a new message is created.
   * This is intended to be used for the UI message,
   * if the last original message is not an assistant message
   * (in which case that message ID is used).
   */
  newMessageId?: string;
  /**
   * The original messages.
   */
  originalMessages?: UIMessage[];
  onFinish?: (options: {
    /**
     * The updates list of UI messages.
     */
    messages: UIMessage[];
    /**
     * Indicates whether the response message is a continuation of the last original message,
     * or if a new message was created.
     */
    isContinuation: boolean;
    /**
     * The message that was sent to the client as a response
     * (including the original message if it was extended).
     */
    responseMessage: UIMessage;
  }) => void;
  /**
   * Extracts message metadata that will be send to the client.
   *
   * Called on `start` and `finish` events.
   */
  messageMetadata?: (options: {
    part: TextStreamPart<ToolSet> & {
      type: 'start' | 'finish' | 'start-step' | 'finish-step';
    };
  }) => unknown;
  /**
   * Send reasoning parts to the client.
   * Default to false.
   */
  sendReasoning?: boolean;
  /**
   * Send source parts to the client.
   * Default to false.
   */
  sendSources?: boolean;
  /**
   * Send the finish event to the client.
   * Set to false if you are using additional streamText calls
   * that send additional data.
   * Default to true.
   */
  experimental_sendFinish?: boolean;
  /**
   * Send the message start event to the client.
   * Set to false if you are using additional streamText calls
   * and the message start event has already been sent.
   * Default to true.
   *
   * Note: this setting is currently not used, but you should
   * already set it to false if you are using additional
   * streamText calls that send additional data to prevent
   * the message start event from being sent multiple times.
   */
  experimental_sendStart?: boolean;
  /**
   * Process an error, e.g. to log it. Default to `() => 'An error occurred.'`.
   *
   * @return error message to include in the data stream.
   */
  onError?: (error: unknown) => string;
};
type ConsumeStreamOptions = {
  onError?: (error: unknown) => void;
};
/**
A result object for accessing different stream types and additional information.
 */
interface StreamTextResult<TOOLS extends ToolSet, PARTIAL_OUTPUT> {
  /**
  The content that was generated in the last step.
  
  Resolved when the response is finished.
     */
  readonly content: Promise<Array<ContentPart<TOOLS>>>;
  /**
  The full text that has been generated by the last step.
  
  Resolved when the response is finished.
       */
  readonly text: Promise<string>;
  /**
  The full reasoning that the model has generated.
  
  Resolved when the response is finished.
     */
  readonly reasoning: Promise<Array<ReasoningPart>>;
  /**
  The reasoning that has been generated by the last step.
  
  Resolved when the response is finished.
       */
  readonly reasoningText: Promise<string | undefined>;
  /**
  Files that have been generated by the model in the last step.
  
  Resolved when the response is finished.
     */
  readonly files: Promise<GeneratedFile[]>;
  /**
  Sources that have been used as references in the last step.
  
  Resolved when the response is finished.
     */
  readonly sources: Promise<Source[]>;
  /**
  The tool calls that have been executed in the last step.
  
  Resolved when the response is finished.
       */
  readonly toolCalls: Promise<ToolCallUnion<TOOLS>[]>;
  /**
  The tool results that have been generated in the last step.
  
  Resolved when the all tool executions are finished.
     */
  readonly toolResults: Promise<ToolResultUnion<TOOLS>[]>;
  /**
  The reason why the generation finished. Taken from the last step.
  
  Resolved when the response is finished.
       */
  readonly finishReason: Promise<FinishReason>;
  /**
  The token usage of the last step.
  
  Resolved when the response is finished.
     */
  readonly usage: Promise<LanguageModelUsage>;
  /**
  The total token usage of the generated response.
  When there are multiple steps, the usage is the sum of all step usages.
  
  Resolved when the response is finished.
       */
  readonly totalUsage: Promise<LanguageModelUsage>;
  /**
  Warnings from the model provider (e.g. unsupported settings) for the first step.
       */
  readonly warnings: Promise<CallWarning[] | undefined>;
  /**
  Details for all steps.
  You can use this to get information about intermediate steps,
  such as the tool calls or the response headers.
     */
  readonly steps: Promise<Array<StepResult<TOOLS>>>;
  /**
  Additional request information from the last step.
   */
  readonly request: Promise<LanguageModelRequestMetadata>;
  /**
  Additional response information from the last step.
   */
  readonly response: Promise<
    LanguageModelResponseMetadata & {
      /**
  The response messages that were generated during the call. It consists of an assistant message,
  potentially containing tool calls.
  
  When there are tool results, there is an additional tool message with the tool results that are available.
  If there are tools that do not have execute functions, they are not included in the tool results and
  need to be added separately.
         */
      messages: Array<ResponseMessage>;
    }
  >;
  /**
  Additional provider-specific metadata from the last step.
  Metadata is passed through from the provider to the AI SDK and
  enables provider-specific results that can be fully encapsulated in the provider.
     */
  readonly providerMetadata: Promise<ProviderMetadata | undefined>;
  /**
    A text stream that returns only the generated text deltas. You can use it
    as either an AsyncIterable or a ReadableStream. When an error occurs, the
    stream will throw the error.
       */
  readonly textStream: AsyncIterableStream<string>;
  /**
    A stream with all events, including text deltas, tool calls, tool results, and
    errors.
    You can use it as either an AsyncIterable or a ReadableStream.
    Only errors that stop the stream, such as network errors, are thrown.
       */
  readonly fullStream: AsyncIterableStream<TextStreamPart<TOOLS>>;
  /**
  A stream of partial outputs. It uses the `experimental_output` specification.
     */
  readonly experimental_partialOutputStream: AsyncIterableStream<PARTIAL_OUTPUT>;
  /**
  Consumes the stream without processing the parts.
  This is useful to force the stream to finish.
  It effectively removes the backpressure and allows the stream to finish,
  triggering the `onFinish` callback and the promise resolution.
  
  If an error occurs, it is passed to the optional `onError` callback.
    */
  consumeStream(options?: ConsumeStreamOptions): Promise<void>;
  /**
    Converts the result to a UI message stream.
  
    @param options.getErrorMessage an optional function that converts an error to an error message.
    @param options.sendUsage whether to send the usage information to the client. Defaults to true.
    @param options.sendReasoning whether to send the reasoning information to the client. Defaults to false.
    @param options.sendSources whether to send the sources information to the client. Defaults to false.
    @param options.experimental_sendFinish whether to send the finish information to the client. Defaults to true.
    @param options.experimental_sendStart whether to send the start information to the client. Defaults to true.
  
    @return A UI message stream.
       */
  toUIMessageStream(options?: UIMessageStreamOptions): ReadableStream<UIMessageStreamPart>;
  /**
    Writes UI message stream output to a Node.js response-like object.
    @param response A Node.js response-like object (ServerResponse).
    @param options.status The status code.
    @param options.statusText The status text.
    @param options.headers The headers.
    @param options.getErrorMessage An optional function that converts an error to an error message.
    @param options.sendUsage Whether to send the usage information to the client. Defaults to true.
    @param options.sendReasoning Whether to send the reasoning information to the client. Defaults to false.
       */
  pipeUIMessageStreamToResponse(
    response: ServerResponse,
    options?: ResponseInit & UIMessageStreamOptions,
  ): void;
  /**
    Writes text delta output to a Node.js response-like object.
    It sets a `Content-Type` header to `text/plain; charset=utf-8` and
    writes each text delta as a separate chunk.
    @param response A Node.js response-like object (ServerResponse).
    @param init Optional headers, status code, and status text.
       */
  pipeTextStreamToResponse(response: ServerResponse, init?: ResponseInit): void;
  /**
    Converts the result to a streamed response object with a stream data part stream.
  
    @param options.status The status code.
    @param options.statusText The status text.
    @param options.headers The headers.
    @param options.getErrorMessage An optional function that converts an error to an error message.
    @param options.sendUsage Whether to send the usage information to the client. Defaults to true.
    @param options.sendReasoning Whether to send the reasoning information to the client. Defaults to false.
    @return A response object.
       */
  toUIMessageStreamResponse(options?: ResponseInit & UIMessageStreamOptions): Response;
  /**
    Creates a simple text stream response.
    Each text delta is encoded as UTF-8 and sent as a separate chunk.
    Non-text-delta events are ignored.
    @param init Optional headers, status code, and status text.
       */
  toTextStreamResponse(init?: ResponseInit): Response;
}
type TextStreamPart<TOOLS extends ToolSet> =
  | ContentPart<TOOLS>
  | {
      type: 'reasoning-part-finish';
    }
  | {
      type: 'tool-call-streaming-start';
      toolCallId: string;
      toolName: string;
    }
  | {
      type: 'tool-call-delta';
      toolCallId: string;
      toolName: string;
      argsTextDelta: string;
    }
  | {
      type: 'start-step';
      request: LanguageModelRequestMetadata;
      warnings: CallWarning[];
    }
  | {
      type: 'finish-step';
      response: LanguageModelResponseMetadata;
      usage: LanguageModelUsage;
      finishReason: FinishReason;
      providerMetadata: ProviderMetadata | undefined;
    }
  | {
      type: 'start';
    }
  | {
      type: 'finish';
      finishReason: FinishReason;
      totalUsage: LanguageModelUsage;
    }
  | {
      type: 'error';
      error: unknown;
    };

/**
 * Detects the first chunk in a buffer.
 *
 * @param buffer - The buffer to detect the first chunk in.
 *
 * @returns The first detected chunk, or `undefined` if no chunk was detected.
 */
type ChunkDetector = (buffer: string) => string | undefined | null;
/**
 * Smooths text streaming output.
 *
 * @param delayInMs - The delay in milliseconds between each chunk. Defaults to 10ms. Can be set to `null` to skip the delay.
 * @param chunking - Controls how the text is chunked for streaming. Use "word" to stream word by word (default), "line" to stream line by line, or provide a custom RegExp pattern for custom chunking.
 *
 * @returns A transform stream that smooths text streaming output.
 */
declare function smoothStream<TOOLS extends ToolSet>({
  delayInMs,
  chunking,
  _internal: { delay },
}?: {
  delayInMs?: number | null;
  chunking?: 'word' | 'line' | RegExp | ChunkDetector;
  /**
   * Internal. For test use only. May change without notice.
   */
  _internal?: {
    delay?: (delayInMs: number | null) => Promise<void>;
  };
}): (options: { tools: TOOLS }) => TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>;

/**
A transformation that is applied to the stream.

@param stopStream - A function that stops the source stream.
@param tools - The tools that are accessible to and can be called by the model. The model needs to support calling tools.
 */
type StreamTextTransform<TOOLS extends ToolSet> = (options: {
  tools: TOOLS;
  stopStream: () => void;
}) => TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>;
/**
Callback that is set using the `onError` option.

@param event - The event that is passed to the callback.
 */
type StreamTextOnErrorCallback = (event: { error: unknown }) => Promise<void> | void;
/**
Callback that is set using the `onStepFinish` option.

@param stepResult - The result of the step.
 */
type StreamTextOnStepFinishCallback<TOOLS extends ToolSet> = (
  stepResult: StepResult<TOOLS>,
) => Promise<void> | void;
/**
Callback that is set using the `onChunk` option.

@param event - The event that is passed to the callback.
 */
type StreamTextOnChunkCallback<TOOLS extends ToolSet> = (event: {
  chunk: Extract<
    TextStreamPart<TOOLS>,
    {
      type:
        | 'text'
        | 'reasoning'
        | 'source'
        | 'tool-call'
        | 'tool-call-streaming-start'
        | 'tool-call-delta'
        | 'tool-result';
    }
  >;
}) => Promise<void> | void;
/**
Callback that is set using the `onFinish` option.

@param event - The event that is passed to the callback.
 */
type StreamTextOnFinishCallback<TOOLS extends ToolSet> = (
  event: StepResult<TOOLS> & {
    /**
Details for all steps.
   */
    readonly steps: StepResult<TOOLS>[];
    /**
Total usage for all steps. This is the sum of the usage of all steps.
     */
    readonly totalUsage: LanguageModelUsage;
  },
) => Promise<void> | void;
/**
Generate a text and call tools for a given prompt using a language model.

This function streams the output. If you do not want to stream the output, use `generateText` instead.

@param model - The language model to use.
@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.

@param system - A system message that will be part of the prompt.
@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.
@param messages - A list of messages. You can either use `prompt` or `messages` but not both.

@param maxOutputTokens - Maximum number of tokens to generate.
@param temperature - Temperature setting.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topP - Nucleus sampling.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topK - Only sample from the top K options for each subsequent token.
Used to remove "long tail" low probability responses.
Recommended for advanced use cases only. You usually only need to use temperature.
@param presencePenalty - Presence penalty setting.
It affects the likelihood of the model to repeat information that is already in the prompt.
The value is passed through to the provider. The range depends on the provider and model.
@param frequencyPenalty - Frequency penalty setting.
It affects the likelihood of the model to repeatedly use the same words or phrases.
The value is passed through to the provider. The range depends on the provider and model.
@param stopSequences - Stop sequences.
If set, the model will stop generating text when one of the stop sequences is generated.
@param seed - The seed (integer) to use for random sampling.
If set and supported by the model, calls will generate deterministic results.

@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@param maxSteps - Maximum number of sequential LLM calls (steps), e.g. when you use tool calls.

@param onChunk - Callback that is called for each chunk of the stream. The stream processing will pause until the callback promise is resolved.
@param onError - Callback that is called when an error occurs during streaming. You can use it to log errors.
@param onStepFinish - Callback that is called when each step (LLM call) is finished, including intermediate steps.
@param onFinish - Callback that is called when the LLM response and all request tool executions
(for tools that have an `execute` function) are finished.

@return
A result object for accessing different stream types and additional information.
 */
declare function streamText<TOOLS extends ToolSet, OUTPUT = never, PARTIAL_OUTPUT = never>({
  model,
  tools,
  toolChoice,
  system,
  prompt,
  messages,
  maxRetries,
  abortSignal,
  headers,
  maxSteps,
  experimental_output: output,
  experimental_telemetry: telemetry,
  providerOptions,
  experimental_toolCallStreaming,
  toolCallStreaming,
  experimental_activeTools: activeTools,
  experimental_repairToolCall: repairToolCall,
  experimental_transform: transform,
  onChunk,
  onError,
  onFinish,
  onStepFinish,
  _internal: { now, generateId, currentDate },
  ...settings
}: CallSettings &
  Prompt & {
    /**
The language model to use.
     */
    model: LanguageModel;
    /**
The tools that the model can call. The model needs to support calling tools.
    */
    tools?: TOOLS;
    /**
The tool choice strategy. Default: 'auto'.
     */
    toolChoice?: ToolChoice<TOOLS>;
    /**
Maximum number of sequential LLM calls (steps), e.g. when you use tool calls. Must be at least 1.

A maximum number is required to prevent infinite loops in the case of misconfigured tools.

By default, it's set to 1, which means that only a single LLM call is made.
 */
    maxSteps?: number;
    /**
Optional telemetry configuration (experimental).
     */
    experimental_telemetry?: TelemetrySettings;
    /**
Additional provider-specific options. They are passed through
to the provider from the AI SDK and enable provider-specific
functionality that can be fully encapsulated in the provider.
 */
    providerOptions?: ProviderOptions;
    /**
Limits the tools that are available for the model to call without
changing the tool call and result types in the result.
     */
    experimental_activeTools?: Array<keyof TOOLS>;
    /**
Optional specification for parsing structured outputs from the LLM response.
     */
    experimental_output?: Output$1<OUTPUT, PARTIAL_OUTPUT>;
    /**
A function that attempts to repair a tool call that failed to parse.
     */
    experimental_repairToolCall?: ToolCallRepairFunction<TOOLS>;
    /**
Enable streaming of tool call deltas as they are generated. Disabled by default.
     */
    toolCallStreaming?: boolean;
    /**
@deprecated Use `toolCallStreaming` instead.
     */
    experimental_toolCallStreaming?: boolean;
    /**
Optional stream transformations.
They are applied in the order they are provided.
The stream transformations must maintain the stream structure for streamText to work correctly.
     */
    experimental_transform?: StreamTextTransform<TOOLS> | Array<StreamTextTransform<TOOLS>>;
    /**
Callback that is called for each chunk of the stream.
The stream processing will pause until the callback promise is resolved.
     */
    onChunk?: StreamTextOnChunkCallback<TOOLS>;
    /**
Callback that is invoked when an error occurs during streaming.
You can use it to log errors.
The stream processing will pause until the callback promise is resolved.
     */
    onError?: StreamTextOnErrorCallback;
    /**
Callback that is called when the LLM response and all request tool executions
(for tools that have an `execute` function) are finished.

The usage is the combined usage of all steps.
     */
    onFinish?: StreamTextOnFinishCallback<TOOLS>;
    /**
Callback that is called when each step (LLM call) is finished, including intermediate steps.
    */
    onStepFinish?: StreamTextOnStepFinishCallback<TOOLS>;
    /**
Internal. For test use only. May change without notice.
     */
    _internal?: {
      now?: () => number;
      generateId?: IdGenerator;
      currentDate?: () => Date;
    };
  }): StreamTextResult<TOOLS, PARTIAL_OUTPUT>;

/**
The result of a `generateImage` call.
It contains the images and additional information.
 */
interface GenerateImageResult {
  /**
  The first image that was generated.
     */
  readonly image: GeneratedFile;
  /**
  The images that were generated.
       */
  readonly images: Array<GeneratedFile>;
  /**
  Warnings for the call, e.g. unsupported settings.
       */
  readonly warnings: Array<ImageGenerationWarning>;
  /**
  Response metadata from the provider. There may be multiple responses if we made multiple calls to the model.
     */
  readonly responses: Array<ImageModelResponseMetadata>;
  /**
   * Provider-specific metadata. They are passed through from the provider to the AI SDK and enable provider-specific
   * results that can be fully encapsulated in the provider.
   */
  readonly providerMetadata: ImageModelProviderMetadata;
}

/**
Generates images using an image model.

@param model - The image model to use.
@param prompt - The prompt that should be used to generate the image.
@param n - Number of images to generate. Default: 1.
@param size - Size of the images to generate. Must have the format `{width}x{height}`.
@param aspectRatio - Aspect ratio of the images to generate. Must have the format `{width}:{height}`.
@param seed - Seed for the image generation.
@param providerOptions - Additional provider-specific options that are passed through to the provider
as body parameters.
@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@returns A result object that contains the generated images.
 */
declare function generateImage({
  model,
  prompt,
  n,
  maxImagesPerCall,
  size,
  aspectRatio,
  seed,
  providerOptions,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
}: {
  /**
  The image model to use.
       */
  model: ImageModelV2;
  /**
  The prompt that should be used to generate the image.
     */
  prompt: string;
  /**
  Number of images to generate.
     */
  n?: number;
  /**
  Number of images to generate.
     */
  maxImagesPerCall?: number;
  /**
  Size of the images to generate. Must have the format `{width}x{height}`. If not provided, the default size will be used.
     */
  size?: `${number}x${number}`;
  /**
  Aspect ratio of the images to generate. Must have the format `{width}:{height}`. If not provided, the default aspect ratio will be used.
     */
  aspectRatio?: `${number}:${number}`;
  /**
  Seed for the image generation. If not provided, the default seed will be used.
     */
  seed?: number;
  /**
  Additional provider-specific options that are passed through to the provider
  as body parameters.
  
  The outer record is keyed by the provider name, and the inner
  record is keyed by the provider-specific metadata key.
  ```ts
  {
    "openai": {
      "style": "vivid"
    }
  }
  ```
       */
  providerOptions?: ProviderOptions;
  /**
  Maximum number of retries per embedding model call. Set to 0 to disable retries.
  
  @default 2
     */
  maxRetries?: number;
  /**
  Abort signal.
   */
  abortSignal?: AbortSignal;
  /**
  Additional headers to include in the request.
  Only applicable for HTTP-based providers.
   */
  headers?: Record<string, string>;
}): Promise<GenerateImageResult>;

/**
The result of a `generateObject` call.
 */
interface GenerateObjectResult<OBJECT> {
  /**
    The generated object (typed according to the schema).
       */
  readonly object: OBJECT;
  /**
    The reason why the generation finished.
       */
  readonly finishReason: FinishReason;
  /**
    The token usage of the generated text.
       */
  readonly usage: LanguageModelUsage;
  /**
    Warnings from the model provider (e.g. unsupported settings).
       */
  readonly warnings: CallWarning[] | undefined;
  /**
  Additional request information.
     */
  readonly request: LanguageModelRequestMetadata;
  /**
  Additional response information.
     */
  readonly response: LanguageModelResponseMetadata & {
    /**
    Response body (available only for providers that use HTTP requests).
        */
    body?: unknown;
  };
  /**
  Additional provider-specific metadata. They are passed through
  from the provider to the AI SDK and enable provider-specific
  results that can be fully encapsulated in the provider.
     */
  readonly providerMetadata: ProviderMetadata | undefined;
  /**
    Converts the object to a JSON response.
    The response will have a status code of 200 and a content type of `application/json; charset=utf-8`.
       */
  toJsonResponse(init?: ResponseInit): Response;
}

/**
A function that attempts to repair the raw output of the mode
to enable JSON parsing.

Should return the repaired text or null if the text cannot be repaired.
     */
type RepairTextFunction = (options: {
  text: string;
  error: JSONParseError | TypeValidationError;
}) => Promise<string | null>;
/**
Generate a structured, typed object for a given prompt and schema using a language model.

This function does not stream the output. If you want to stream the output, use `streamObject` instead.

@param model - The language model to use.
@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.

@param system - A system message that will be part of the prompt.
@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.
@param messages - A list of messages. You can either use `prompt` or `messages` but not both.

@param maxOutputTokens - Maximum number of tokens to generate.
@param temperature - Temperature setting.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topP - Nucleus sampling.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topK - Only sample from the top K options for each subsequent token.
Used to remove "long tail" low probability responses.
Recommended for advanced use cases only. You usually only need to use temperature.
@param presencePenalty - Presence penalty setting.
It affects the likelihood of the model to repeat information that is already in the prompt.
The value is passed through to the provider. The range depends on the provider and model.
@param frequencyPenalty - Frequency penalty setting.
It affects the likelihood of the model to repeatedly use the same words or phrases.
The value is passed through to the provider. The range depends on the provider and model.
@param stopSequences - Stop sequences.
If set, the model will stop generating text when one of the stop sequences is generated.
@param seed - The seed (integer) to use for random sampling.
If set and supported by the model, calls will generate deterministic results.

@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@param schema - The schema of the object that the model should generate.
@param schemaName - Optional name of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema name.
@param schemaDescription - Optional description of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema description.

@param output - The type of the output.

- 'object': The output is an object.
- 'array': The output is an array.
- 'enum': The output is an enum.
- 'no-schema': The output is not a schema.

@param experimental_repairText - A function that attempts to repair the raw output of the mode
to enable JSON parsing.

@param experimental_telemetry - Optional telemetry configuration (experimental).

@param providerOptions - Additional provider-specific options. They are passed through
to the provider from the AI SDK and enable provider-specific
functionality that can be fully encapsulated in the provider.

@returns
A result object that contains the generated object, the finish reason, the token usage, and additional information.
 */
declare function generateObject<
  RESULT extends SCHEMA extends z.Schema
    ? Output extends 'array'
      ? Array<z.infer<SCHEMA>>
      : z.infer<SCHEMA>
    : SCHEMA extends Schema<infer T>
      ? Output extends 'array'
        ? Array<T>
        : T
      : never,
  SCHEMA extends z.Schema | Schema = z.Schema<JSONValue$1>,
  Output extends 'object' | 'array' | 'enum' | 'no-schema' = RESULT extends string
    ? 'enum'
    : 'object',
>(
  options: Omit<CallSettings, 'stopSequences'> &
    Prompt &
    (Output extends 'enum'
      ? {
          /**
The enum values that the model should use.
  */
          enum: Array<RESULT>;
          mode?: 'json';
          output: 'enum';
        }
      : Output extends 'no-schema'
        ? {}
        : {
            /**
The schema of the object that the model should generate.
*/
            schema: SCHEMA;
            /**
Optional name of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema name.
*/
            schemaName?: string;
            /**
Optional description of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema description.
*/
            schemaDescription?: string;
            /**
The mode to use for object generation.

The schema is converted into a JSON schema and used in one of the following ways

- 'auto': The provider will choose the best mode for the model.
- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.
- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.

Please note that most providers do not support all modes.

Default and recommended: 'auto' (best mode for the model).
*/
            mode?: 'auto' | 'json' | 'tool';
          }) & {
      output?: Output;
      /**
The language model to use.
     */
      model: LanguageModel;
      /**
A function that attempts to repair the raw output of the mode
to enable JSON parsing.
     */
      experimental_repairText?: RepairTextFunction;
      /**
Optional telemetry configuration (experimental).
       */
      experimental_telemetry?: TelemetrySettings;
      /**
Additional provider-specific options. They are passed through
to the provider from the AI SDK and enable provider-specific
functionality that can be fully encapsulated in the provider.
 */
      providerOptions?: ProviderOptions;
      /**
       * Internal. For test use only. May change without notice.
       */
      _internal?: {
        generateId?: () => string;
        currentDate?: () => Date;
      };
    },
): Promise<GenerateObjectResult<RESULT>>;

/**
 * Converts a data URL of type text/* to a text string.
 */
declare function getTextFromDataUrl(dataUrl: string): string;

/**
 * Performs a deep-equal comparison of two parsed JSON objects.
 *
 * @param {any} obj1 - The first object to compare.
 * @param {any} obj2 - The second object to compare.
 * @returns {boolean} - Returns true if the two objects are deeply equal, false otherwise.
 */
declare function isDeepEqualData(obj1: any, obj2: any): boolean;

declare function parsePartialJson(jsonText: string | undefined): Promise<{
  value: JSONValue$1 | undefined;
  state: 'undefined-input' | 'successful-parse' | 'repaired-parse' | 'failed-parse';
}>;

/**
 * Calculates the cosine similarity between two vectors. This is a useful metric for
 * comparing the similarity of two vectors such as embeddings.
 *
 * @param vector1 - The first vector.
 * @param vector2 - The second vector.
 *
 * @returns The cosine similarity between vector1 and vector2.
 * @returns 0 if either vector is the zero vector.
 *
 * @throws {InvalidArgumentError} If the vectors do not have the same length.
 */
declare function cosineSimilarity(vector1: number[], vector2: number[]): number;

/**
 * Creates a ReadableStream that emits the provided values with an optional delay between each value.
 *
 * @param options - The configuration options
 * @param options.chunks - Array of values to be emitted by the stream
 * @param options.initialDelayInMs - Optional initial delay in milliseconds before emitting the first value (default: 0). Can be set to `null` to skip the initial delay. The difference between `initialDelayInMs: null` and `initialDelayInMs: 0` is that `initialDelayInMs: null` will emit the values without any delay, while `initialDelayInMs: 0` will emit the values with a delay of 0 milliseconds.
 * @param options.chunkDelayInMs - Optional delay in milliseconds between emitting each value (default: 0). Can be set to `null` to skip the delay. The difference between `chunkDelayInMs: null` and `chunkDelayInMs: 0` is that `chunkDelayInMs: null` will emit the values without any delay, while `chunkDelayInMs: 0` will emit the values with a delay of 0 milliseconds.
 * @returns A ReadableStream that emits the provided values
 */
declare function simulateReadableStream<T>({
  chunks,
  initialDelayInMs,
  chunkDelayInMs,
  _internal,
}: {
  chunks: T[];
  initialDelayInMs?: number | null;
  chunkDelayInMs?: number | null;
  _internal?: {
    delay?: (ms: number | null) => Promise<void>;
  };
}): ReadableStream<T>;

/**
The result of a `streamObject` call that contains the partial object stream and additional information.
 */
interface StreamObjectResult<PARTIAL, RESULT, ELEMENT_STREAM> {
  /**
    Warnings from the model provider (e.g. unsupported settings)
       */
  readonly warnings: Promise<CallWarning[] | undefined>;
  /**
    The token usage of the generated response. Resolved when the response is finished.
       */
  readonly usage: Promise<LanguageModelUsage>;
  /**
  Additional provider-specific metadata. They are passed through
  from the provider to the AI SDK and enable provider-specific
  results that can be fully encapsulated in the provider.
     */
  readonly providerMetadata: Promise<ProviderMetadata | undefined>;
  /**
  Additional request information from the last step.
   */
  readonly request: Promise<LanguageModelRequestMetadata>;
  /**
  Additional response information.
   */
  readonly response: Promise<LanguageModelResponseMetadata>;
  /**
    The generated object (typed according to the schema). Resolved when the response is finished.
       */
  readonly object: Promise<RESULT>;
  /**
    Stream of partial objects. It gets more complete as the stream progresses.
  
    Note that the partial object is not validated.
    If you want to be certain that the actual content matches your schema, you need to implement your own validation for partial results.
       */
  readonly partialObjectStream: AsyncIterableStream<PARTIAL>;
  /**
   * Stream over complete array elements. Only available if the output strategy is set to `array`.
   */
  readonly elementStream: ELEMENT_STREAM;
  /**
    Text stream of the JSON representation of the generated object. It contains text chunks.
    When the stream is finished, the object is valid JSON that can be parsed.
       */
  readonly textStream: AsyncIterableStream<string>;
  /**
    Stream of different types of events, including partial objects, errors, and finish events.
    Only errors that stop the stream, such as network errors, are thrown.
       */
  readonly fullStream: AsyncIterableStream<ObjectStreamPart<PARTIAL>>;
  /**
    Writes text delta output to a Node.js response-like object.
    It sets a `Content-Type` header to `text/plain; charset=utf-8` and
    writes each text delta as a separate chunk.
  
    @param response A Node.js response-like object (ServerResponse).
    @param init Optional headers, status code, and status text.
       */
  pipeTextStreamToResponse(response: ServerResponse$1, init?: ResponseInit): void;
  /**
    Creates a simple text stream response.
    The response has a `Content-Type` header set to `text/plain; charset=utf-8`.
    Each text delta is encoded as UTF-8 and sent as a separate chunk.
    Non-text-delta events are ignored.
  
    @param init Optional headers, status code, and status text.
       */
  toTextStreamResponse(init?: ResponseInit): Response;
}
type ObjectStreamPart<PARTIAL> =
  | {
      type: 'object';
      object: PARTIAL;
    }
  | {
      type: 'text-delta';
      textDelta: string;
    }
  | {
      type: 'error';
      error: unknown;
    }
  | {
      type: 'finish';
      finishReason: FinishReason;
      usage: LanguageModelUsage;
      response: LanguageModelResponseMetadata;
      providerMetadata?: ProviderMetadata;
    };

/**
Callback that is set using the `onError` option.

@param event - The event that is passed to the callback.
 */
type StreamObjectOnErrorCallback = (event: { error: unknown }) => Promise<void> | void;
/**
Callback that is set using the `onFinish` option.

@param event - The event that is passed to the callback.
 */
type StreamObjectOnFinishCallback<RESULT> = (event: {
  /**
  The token usage of the generated response.
  */
  usage: LanguageModelUsage;
  /**
  The generated object. Can be undefined if the final object does not match the schema.
  */
  object: RESULT | undefined;
  /**
  Optional error object. This is e.g. a TypeValidationError when the final object does not match the schema.
  */
  error: unknown | undefined;
  /**
  Response metadata.
   */
  response: LanguageModelResponseMetadata;
  /**
  Warnings from the model provider (e.g. unsupported settings).
  */
  warnings?: CallWarning[];
  /**
  Additional provider-specific metadata. They are passed through
  to the provider from the AI SDK and enable provider-specific
  functionality that can be fully encapsulated in the provider.
  */
  providerMetadata: ProviderMetadata | undefined;
}) => Promise<void> | void;
/**
Generate a structured, typed object for a given prompt and schema using a language model.

This function streams the output. If you do not want to stream the output, use `generateObject` instead.

@param model - The language model to use.
@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.

@param system - A system message that will be part of the prompt.
@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.
@param messages - A list of messages. You can either use `prompt` or `messages` but not both.

@param maxOutputTokens - Maximum number of tokens to generate.
@param temperature - Temperature setting.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topP - Nucleus sampling.
The value is passed through to the provider. The range depends on the provider and model.
It is recommended to set either `temperature` or `topP`, but not both.
@param topK - Only sample from the top K options for each subsequent token.
Used to remove "long tail" low probability responses.
Recommended for advanced use cases only. You usually only need to use temperature.
@param presencePenalty - Presence penalty setting.
It affects the likelihood of the model to repeat information that is already in the prompt.
The value is passed through to the provider. The range depends on the provider and model.
@param frequencyPenalty - Frequency penalty setting.
It affects the likelihood of the model to repeatedly use the same words or phrases.
The value is passed through to the provider. The range depends on the provider and model.
@param stopSequences - Stop sequences.
If set, the model will stop generating text when one of the stop sequences is generated.
@param seed - The seed (integer) to use for random sampling.
If set and supported by the model, calls will generate deterministic results.

@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@param schema - The schema of the object that the model should generate.
@param schemaName - Optional name of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema name.
@param schemaDescription - Optional description of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema description.

@param output - The type of the output.

- 'object': The output is an object.
- 'array': The output is an array.
- 'enum': The output is an enum.
- 'no-schema': The output is not a schema.

@param experimental_telemetry - Optional telemetry configuration (experimental).

@param providerOptions - Additional provider-specific options. They are passed through
to the provider from the AI SDK and enable provider-specific
functionality that can be fully encapsulated in the provider.

@returns
A result object for accessing the partial object stream and additional information.
 */
declare function streamObject<
  RESULT extends SCHEMA extends z.Schema
    ? Output extends 'array'
      ? Array<z.infer<SCHEMA>>
      : z.infer<SCHEMA>
    : SCHEMA extends Schema<infer T>
      ? Output extends 'array'
        ? Array<T>
        : T
      : never,
  SCHEMA extends z.Schema | Schema = z.Schema<JSONValue$1>,
  Output extends 'object' | 'array' | 'enum' | 'no-schema' = RESULT extends string
    ? 'enum'
    : 'object',
>(
  options: Omit<CallSettings, 'stopSequences'> &
    Prompt &
    (Output extends 'enum'
      ? {
          /**
The enum values that the model should use.
  */
          enum: Array<RESULT>;
          mode?: 'json';
          output: 'enum';
        }
      : Output extends 'no-schema'
        ? {}
        : {
            /**
The schema of the object that the model should generate.
*/
            schema: SCHEMA;
            /**
Optional name of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema name.
*/
            schemaName?: string;
            /**
Optional description of the output that should be generated.
Used by some providers for additional LLM guidance, e.g.
via tool or schema description.
*/
            schemaDescription?: string;
            /**
The mode to use for object generation.

The schema is converted into a JSON schema and used in one of the following ways

- 'auto': The provider will choose the best mode for the model.
- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.
- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.

Please note that most providers do not support all modes.

Default and recommended: 'auto' (best mode for the model).
*/
            mode?: 'auto' | 'json' | 'tool';
          }) & {
      output?: Output;
      /**
The language model to use.
   */
      model: LanguageModel;
      /**
Optional telemetry configuration (experimental).
     */
      experimental_telemetry?: TelemetrySettings;
      /**
Additional provider-specific options. They are passed through
to the provider from the AI SDK and enable provider-specific
functionality that can be fully encapsulated in the provider.
*/
      providerOptions?: ProviderOptions;
      /**
Callback that is invoked when an error occurs during streaming.
You can use it to log errors.
The stream processing will pause until the callback promise is resolved.
   */
      onError?: StreamObjectOnErrorCallback;
      /**
Callback that is called when the LLM response and the final object validation are finished.
*/
      onFinish?: StreamObjectOnFinishCallback<RESULT>;
      /**
       * Internal. For test use only. May change without notice.
       */
      _internal?: {
        generateId?: () => string;
        currentDate?: () => Date;
        now?: () => number;
      };
    },
): StreamObjectResult<
  Output extends 'enum' ? string : Output extends 'array' ? RESULT : DeepPartial<RESULT>,
  Output extends 'array' ? RESULT : RESULT,
  Output extends 'array' ? (RESULT extends Array<infer U> ? AsyncIterableStream<U> : never) : never
>;

/**
 * A generated audio file.
 */
interface GeneratedAudioFile extends GeneratedFile {
  /**
   * Audio format of the file (e.g., 'mp3', 'wav', etc.)
   */
  readonly format: string;
}

/**
The result of a `generateSpeech` call.
It contains the audio data and additional information.
 */
interface SpeechResult {
  /**
   * The audio data as a base64 encoded string or binary data.
   */
  readonly audio: GeneratedAudioFile;
  /**
    Warnings for the call, e.g. unsupported settings.
       */
  readonly warnings: Array<SpeechWarning>;
  /**
    Response metadata from the provider. There may be multiple responses if we made multiple calls to the model.
     */
  readonly responses: Array<SpeechModelResponseMetadata>;
  /**
    Provider metadata from the provider.
     */
  readonly providerMetadata: Record<string, Record<string, JSONValue$1>>;
}

/**
Generates speech audio using a speech model.

@param model - The speech model to use.
@param text - The text to convert to speech.
@param voice - The voice to use for speech generation.
@param outputFormat - The output format to use for speech generation e.g. "mp3", "wav", etc.
@param instructions - Instructions for the speech generation e.g. "Speak in a slow and steady tone".
@param speed - The speed of the speech generation.
@param providerOptions - Additional provider-specific options that are passed through to the provider
as body parameters.
@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@returns A result object that contains the generated audio data.
 */
declare function generateSpeech({
  model,
  text,
  voice,
  outputFormat,
  instructions,
  speed,
  providerOptions,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
}: {
  /**
  The speech model to use.
       */
  model: SpeechModelV1;
  /**
  The text to convert to speech.
     */
  text: string;
  /**
  The voice to use for speech generation.
     */
  voice?: string;
  /**
   * The desired output format for the audio e.g. "mp3", "wav", etc.
   */
  outputFormat?: 'mp3' | 'wav' | (string & {});
  /**
      Instructions for the speech generation e.g. "Speak in a slow and steady tone".
    */
  instructions?: string;
  /**
    The speed of the speech generation.
     */
  speed?: number;
  /**
  Additional provider-specific options that are passed through to the provider
  as body parameters.
  
  The outer record is keyed by the provider name, and the inner
  record is keyed by the provider-specific metadata key.
  ```ts
  {
    "openai": {}
  }
  ```
       */
  providerOptions?: ProviderOptions;
  /**
  Maximum number of retries per speech model call. Set to 0 to disable retries.
  
  @default 2
     */
  maxRetries?: number;
  /**
  Abort signal.
   */
  abortSignal?: AbortSignal;
  /**
  Additional headers to include in the request.
  Only applicable for HTTP-based providers.
   */
  headers?: Record<string, string>;
}): Promise<SpeechResult>;

/**
 * Applies default settings for a language model.
 */
declare function defaultSettingsMiddleware({
  settings,
}: {
  settings: Partial<{
    maxOutputTokens?: LanguageModelV2CallOptions['maxOutputTokens'];
    temperature?: LanguageModelV2CallOptions['temperature'];
    stopSequences?: LanguageModelV2CallOptions['stopSequences'];
    topP?: LanguageModelV2CallOptions['topP'];
    topK?: LanguageModelV2CallOptions['topK'];
    presencePenalty?: LanguageModelV2CallOptions['presencePenalty'];
    frequencyPenalty?: LanguageModelV2CallOptions['frequencyPenalty'];
    responseFormat?: LanguageModelV2CallOptions['responseFormat'];
    seed?: LanguageModelV2CallOptions['seed'];
    tools?: LanguageModelV2CallOptions['tools'];
    toolChoice?: LanguageModelV2CallOptions['toolChoice'];
    headers?: LanguageModelV2CallOptions['headers'];
    providerOptions?: LanguageModelV2CallOptions['providerOptions'];
  }>;
}): LanguageModelV2Middleware;

/**
 * Extract an XML-tagged reasoning section from the generated text and exposes it
 * as a `reasoning` property on the result.
 *
 * @param tagName - The name of the XML tag to extract reasoning from.
 * @param separator - The separator to use between reasoning and text sections.
 * @param startWithReasoning - Whether to start with reasoning tokens.
 */
declare function extractReasoningMiddleware({
  tagName,
  separator,
  startWithReasoning,
}: {
  tagName: string;
  separator?: string;
  startWithReasoning?: boolean;
}): LanguageModelV2Middleware;

/**
 * Simulates streaming chunks with the response from a generate call.
 */
declare function simulateStreamingMiddleware(): LanguageModelV2Middleware;

/**
 * Wraps a LanguageModelV2 instance with middleware functionality.
 * This function allows you to apply middleware to transform parameters,
 * wrap generate operations, and wrap stream operations of a language model.
 *
 * @param options - Configuration options for wrapping the language model.
 * @param options.model - The original LanguageModelV2 instance to be wrapped.
 * @param options.middleware - The middleware to be applied to the language model. When multiple middlewares are provided, the first middleware will transform the input first, and the last middleware will be wrapped directly around the model.
 * @param options.modelId - Optional custom model ID to override the original model's ID.
 * @param options.providerId - Optional custom provider ID to override the original model's provider.
 * @returns A new LanguageModelV2 instance with middleware applied.
 */
declare const wrapLanguageModel: ({
  model,
  middleware: middlewareArg,
  modelId,
  providerId,
}: {
  model: LanguageModelV2;
  middleware: LanguageModelV2Middleware | LanguageModelV2Middleware[];
  modelId?: string;
  providerId?: string;
}) => LanguageModelV2;

/**
 * Creates a custom provider with specified language models, text embedding models, and an optional fallback provider.
 *
 * @param {Object} options - The options for creating the custom provider.
 * @param {Record<string, LanguageModel>} [options.languageModels] - A record of language models, where keys are model IDs and values are LanguageModel instances.
 * @param {Record<string, EmbeddingModel<string>>} [options.textEmbeddingModels] - A record of text embedding models, where keys are model IDs and values are EmbeddingModel<string> instances.
 * @param {Record<string, ImageModel>} [options.imageModels] - A record of image models, where keys are model IDs and values are ImageModel instances.
 * @param {Provider} [options.fallbackProvider] - An optional fallback provider to use when a requested model is not found in the custom provider.
 * @returns {Provider} A Provider object with languageModel, textEmbeddingModel, and imageModel methods.
 *
 * @throws {NoSuchModelError} Throws when a requested model is not found and no fallback provider is available.
 */
declare function customProvider<
  LANGUAGE_MODELS extends Record<string, LanguageModel>,
  EMBEDDING_MODELS extends Record<string, EmbeddingModel<string>>,
  IMAGE_MODELS extends Record<string, ImageModel>,
>({
  languageModels,
  textEmbeddingModels,
  imageModels,
  fallbackProvider,
}: {
  languageModels?: LANGUAGE_MODELS;
  textEmbeddingModels?: EMBEDDING_MODELS;
  imageModels?: IMAGE_MODELS;
  fallbackProvider?: ProviderV2;
}): Provider & {
  languageModel(modelId: ExtractModelId<LANGUAGE_MODELS>): LanguageModel;
  textEmbeddingModel(modelId: ExtractModelId<EMBEDDING_MODELS>): EmbeddingModel<string>;
  imageModel(modelId: ExtractModelId<IMAGE_MODELS>): ImageModel;
};
/**
 * @deprecated Use `customProvider` instead.
 */
declare const experimental_customProvider: typeof customProvider;
type ExtractModelId<MODELS extends Record<string, unknown>> = Extract<keyof MODELS, string>;

declare const symbol: unique symbol;
declare class NoSuchProviderError extends NoSuchModelError {
  private readonly [symbol];
  readonly providerId: string;
  readonly availableProviders: string[];
  constructor({
    modelId,
    modelType,
    providerId,
    availableProviders,
    message,
  }: {
    modelId: string;
    modelType: 'languageModel' | 'textEmbeddingModel';
    providerId: string;
    availableProviders: string[];
    message?: string;
  });
  static isInstance(error: unknown): error is NoSuchProviderError;
}

type ExtractLiteralUnion<T> = T extends string ? (string extends T ? never : T) : never;
interface ProviderRegistryProvider<
  PROVIDERS extends Record<string, ProviderV2> = Record<string, ProviderV2>,
  SEPARATOR extends string = ':',
> {
  languageModel<KEY extends keyof PROVIDERS>(
    id: KEY extends string
      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['languageModel']>>[0]>}`
      : never,
  ): LanguageModel;
  languageModel<KEY extends keyof PROVIDERS>(
    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,
  ): LanguageModel;
  textEmbeddingModel<KEY extends keyof PROVIDERS>(
    id: KEY extends string
      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['textEmbeddingModel']>>[0]>}`
      : never,
  ): EmbeddingModel<string>;
  textEmbeddingModel<KEY extends keyof PROVIDERS>(
    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,
  ): EmbeddingModel<string>;
  imageModel<KEY extends keyof PROVIDERS>(
    id: KEY extends string
      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['imageModel']>>[0]>}`
      : never,
  ): ImageModel;
  imageModel<KEY extends keyof PROVIDERS>(
    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,
  ): ImageModel;
}
/**
 * Creates a registry for the given providers.
 */
declare function createProviderRegistry<
  PROVIDERS extends Record<string, ProviderV2>,
  SEPARATOR extends string = ':',
>(
  providers: PROVIDERS,
  {
    separator,
  }?: {
    separator?: SEPARATOR;
  },
): ProviderRegistryProvider<PROVIDERS, SEPARATOR>;
/**
 * @deprecated Use `createProviderRegistry` instead.
 */
declare const experimental_createProviderRegistry: typeof createProviderRegistry;

/**
The result of a `transcribe` call.
It contains the transcript and additional information.
 */
interface TranscriptionResult {
  /**
   * The complete transcribed text from the audio.
   */
  readonly text: string;
  /**
   * Array of transcript segments with timing information.
   * Each segment represents a portion of the transcribed text with start and end times.
   */
  readonly segments: Array<{
    /**
     * The text content of this segment.
     */
    readonly text: string;
    /**
     * The start time of this segment in seconds.
     */
    readonly startSecond: number;
    /**
     * The end time of this segment in seconds.
     */
    readonly endSecond: number;
  }>;
  /**
   * The detected language of the audio content, as an ISO-639-1 code (e.g., 'en' for English).
   * May be undefined if the language couldn't be detected.
   */
  readonly language: string | undefined;
  /**
   * The total duration of the audio file in seconds.
   * May be undefined if the duration couldn't be determined.
   */
  readonly durationInSeconds: number | undefined;
  /**
    Warnings for the call, e.g. unsupported settings.
       */
  readonly warnings: Array<TranscriptionWarning>;
  /**
    Response metadata from the provider. There may be multiple responses if we made multiple calls to the model.
     */
  readonly responses: Array<TranscriptionModelResponseMetadata>;
  /**
    Provider metadata from the provider.
     */
  readonly providerMetadata: Record<string, Record<string, JSONValue$1>>;
}

/**
Generates transcripts using a transcription model.

@param model - The transcription model to use.
@param audio - The audio data to transcribe as DataContent (string | Uint8Array | ArrayBuffer | Buffer) or a URL.
@param providerOptions - Additional provider-specific options that are passed through to the provider
as body parameters.
@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.
@param abortSignal - An optional abort signal that can be used to cancel the call.
@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.

@returns A result object that contains the generated transcript.
 */
declare function transcribe({
  model,
  audio,
  providerOptions,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
}: {
  /**
  The transcription model to use.
       */
  model: TranscriptionModelV1;
  /**
  The audio data to transcribe.
     */
  audio: DataContent | URL;
  /**
  Additional provider-specific options that are passed through to the provider
  as body parameters.
  
  The outer record is keyed by the provider name, and the inner
  record is keyed by the provider-specific metadata key.
  ```ts
  {
    "openai": {
      "temperature": 0
    }
  }
  ```
       */
  providerOptions?: ProviderOptions;
  /**
  Maximum number of retries per transcript model call. Set to 0 to disable retries.
  
  @default 2
     */
  maxRetries?: number;
  /**
  Abort signal.
   */
  abortSignal?: AbortSignal;
  /**
  Additional headers to include in the request.
  Only applicable for HTTP-based providers.
   */
  headers?: Record<string, string>;
}): Promise<TranscriptionResult>;

type UIMessageStreamPart =
  | {
      type: 'text';
      text: string;
    }
  | {
      type: 'error';
      errorText: string;
    }
  | {
      type: 'tool-call';
      toolCallId: string;
      toolName: string;
      args: unknown;
    }
  | {
      type: 'tool-result';
      toolCallId: string;
      result: unknown;
      providerMetadata?: ProviderMetadata;
    }
  | {
      type: 'tool-call-streaming-start';
      toolCallId: string;
      toolName: string;
    }
  | {
      type: 'tool-call-delta';
      toolCallId: string;
      argsTextDelta: string;
    }
  | {
      type: 'reasoning';
      text: string;
      providerMetadata?: ProviderMetadata;
    }
  | {
      type: 'source';
      sourceType: 'url';
      id: string;
      url: string;
      title?: string;
      providerMetadata?: ProviderMetadata;
    }
  | {
      type: 'file';
      url: string;
      mediaType: string;
    }
  | {
      type: `data-${string}`;
      id?: string;
      data: unknown;
    }
  | {
      type: 'metadata';
      metadata: unknown;
    }
  | {
      type: 'start-step';
      metadata?: unknown;
    }
  | {
      type: 'finish-step';
      metadata?: unknown;
    }
  | {
      type: 'start';
      messageId?: string;
      metadata?: unknown;
    }
  | {
      type: 'finish';
      metadata?: unknown;
    }
  | {
      type: 'reasoning-part-finish';
    };

type Job = () => Promise<void>;

declare class SerialJobExecutor {
  private queue;
  private isProcessing;
  private processQueue;
  run(job: Job): Promise<void>;
}

interface UIMessageStreamWriter {
  /**
   * Appends a data stream part to the stream.
   */
  write(part: UIMessageStreamPart): void;
  /**
   * Merges the contents of another stream to this stream.
   */
  merge(stream: ReadableStream<UIMessageStreamPart>): void;
  /**
   * Error handler that is used by the data stream writer.
   * This is intended for forwarding when merging streams
   * to prevent duplicated error masking.
   */
  onError: ((error: unknown) => string) | undefined;
}

declare function createUIMessageStream({
  execute,
  onError,
}: {
  execute: (writer: UIMessageStreamWriter) => Promise<void> | void;
  onError?: (error: unknown) => string;
}): ReadableStream<UIMessageStreamPart>;

declare function createUIMessageStreamResponse({
  status,
  statusText,
  headers,
  stream,
}: ResponseInit & {
  stream: ReadableStream<UIMessageStreamPart>;
}): Response;

declare function pipeUIMessageStreamToResponse({
  response,
  status,
  statusText,
  headers,
  stream,
}: {
  response: ServerResponse;
  stream: ReadableStream<UIMessageStreamPart>;
} & ResponseInit): void;

declare class JsonToSseTransformStream extends TransformStream<unknown, string> {
  constructor();
}

interface ChatTransport<MESSAGE_METADATA, DATA_TYPES extends UIDataTypes> {
  submitMessages: (options: {
    chatId: string;
    messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
    abortController: AbortController;
    body?: object;
    headers?: Record<string, string> | Headers;
    requestType: 'generate' | 'resume';
  }) => Promise<ReadableStream<UIMessageStreamPart>>;
}
declare class DefaultChatTransport<MESSAGE_METADATA, DATA_TYPES extends UIDataTypes>
  implements ChatTransport<MESSAGE_METADATA, DATA_TYPES>
{
  private api;
  private credentials?;
  private headers?;
  private body?;
  private streamProtocol?;
  private fetch?;
  private prepareRequestBody?;
  constructor({
    api,
    credentials,
    headers,
    body,
    streamProtocol,
    fetch,
    prepareRequestBody,
  }: {
    api: string;
    /**
     * The credentials mode to be used for the fetch request.
     * Possible values are: 'omit', 'same-origin', 'include'.
     * Defaults to 'same-origin'.
     */
    credentials?: RequestCredentials;
    /**
     * HTTP headers to be sent with the API request.
     */
    headers?: Record<string, string> | Headers;
    /**
     * Extra body object to be sent with the API request.
     * @example
     * Send a `sessionId` to the API along with the messages.
     * ```js
     * useChat({
     *   body: {
     *     sessionId: '123',
     *   }
     * })
     * ```
     */
    body?: object;
    /**
      Streaming protocol that is used. Defaults to `ui-message`.
         */
    streamProtocol?: 'ui-message' | 'text';
    /**
      Custom fetch implementation. You can use it as a middleware to intercept requests,
      or to provide a custom fetch implementation for e.g. testing.
          */
    fetch?: FetchFunction;
    /**
     * When a function is provided, it will be used
     * to prepare the request body for the chat API. This can be useful for
     * customizing the request body based on the messages and data in the chat.
     *
     * @param id The id of the chat.
     * @param messages The current messages in the chat.
     * @param requestBody The request body object passed in the chat request.
     */
    prepareRequestBody?: (options: {
      id: string;
      messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
      requestBody?: object;
    }) => unknown;
  });
  submitMessages({
    chatId,
    messages,
    abortController,
    body,
    headers,
    requestType,
  }: Parameters<ChatTransport<MESSAGE_METADATA, DATA_TYPES>['submitMessages']>[0]): Promise<
    ReadableStream<UIMessageStreamPart>
  >;
}

type StreamingUIMessageState<
  MESSAGE_METADATA = unknown,
  DATA_TYPES extends UIDataTypes = UIDataTypes,
> = {
  message: UIMessage<MESSAGE_METADATA, DATA_TYPES>;
  activeTextPart: TextUIPart | undefined;
  activeReasoningPart: ReasoningUIPart | undefined;
  partialToolCalls: Record<
    string,
    {
      text: string;
      step: number;
      index: number;
      toolName: string;
    }
  >;
  step: number;
};

interface ChatStoreSubscriber {
  onChatChanged: (event: ChatStoreEvent) => void;
}
interface ChatStoreEvent {
  type: 'chat-messages-changed' | 'chat-status-changed';
  chatId: number | string;
  error?: Error;
}
type ChatStatus = 'submitted' | 'streaming' | 'ready' | 'error';
interface Chat<MESSAGE_METADATA, DATA_TYPES extends UIDataTypes> {
  status: ChatStatus;
  messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
  error?: Error;
  activeResponse?: {
    state: StreamingUIMessageState<MESSAGE_METADATA>;
    abortController?: AbortController;
  };
  jobExecutor: SerialJobExecutor;
}
type ExtendedCallOptions<MESSAGE_METADATA, DATA_TYPES extends UIDataTypes> = ChatRequestOptions & {
  onError?: (error: Error) => void;
  /**
  Optional callback function that is invoked when a tool call is received.
  Intended for automatic client-side tool execution.
  
  You can optionally return a result for the tool call,
  either synchronously or asynchronously.
     */
  onToolCall?: ({
    toolCall,
  }: {
    toolCall: ToolCall<string, unknown>;
  }) => void | Promise<unknown> | unknown;
  /**
   * Optional callback function that is called when the assistant message is finished streaming.
   *
   * @param message The message that was streamed.
   */
  onFinish?: (options: { message: UIMessage<MESSAGE_METADATA, DATA_TYPES> }) => void;
};
declare class ChatStore<MESSAGE_METADATA, DATA_TYPES extends UIDataTypes> {
  private chats;
  private subscribers;
  private generateId;
  private messageMetadataSchema;
  private transport;
  private maxSteps;
  constructor({
    chats,
    generateId,
    messageMetadataSchema,
    transport,
    maxSteps,
  }: {
    chats?: {
      [id: string]: {
        messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
      };
    };
    generateId?: UseChatOptions['generateId'];
    messageMetadataSchema?: Schema<MESSAGE_METADATA>;
    transport: ChatTransport<MESSAGE_METADATA, DATA_TYPES>;
    maxSteps?: number;
  });
  hasChat(id: string): boolean;
  addChat(id: string, messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[]): void;
  getChats(): [string, Chat<MESSAGE_METADATA, DATA_TYPES>][];
  get chatCount(): number;
  getStatus(id: string): ChatStatus;
  setStatus({
    id,
    status,
    error,
  }: {
    id: string;
    status: Chat<MESSAGE_METADATA, DATA_TYPES>['status'];
    error?: Error;
  }): void;
  getError(id: string): Error | undefined;
  getMessages(id: string): UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
  getLastMessage(id: string): UIMessage<MESSAGE_METADATA, DATA_TYPES>;
  subscribe(subscriber: ChatStoreSubscriber): () => void;
  setMessages({
    id,
    messages,
  }: {
    id: string;
    messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
  }): void;
  removeAssistantResponse(id: string): void;
  submitMessage({
    chatId,
    message,
    headers,
    body,
    onError,
    onToolCall,
    onFinish,
  }: ExtendedCallOptions<MESSAGE_METADATA, DATA_TYPES> & {
    chatId: string;
    message: CreateUIMessage<MESSAGE_METADATA, DATA_TYPES>;
  }): Promise<void>;
  resubmitLastUserMessage({
    chatId,
    headers,
    body,
    onError,
    onToolCall,
    onFinish,
  }: ExtendedCallOptions<MESSAGE_METADATA, DATA_TYPES> & {
    chatId: string;
  }): Promise<null | undefined>;
  resumeStream({
    chatId,
    headers,
    body,
    onError,
    onToolCall,
    onFinish,
  }: ExtendedCallOptions<MESSAGE_METADATA, DATA_TYPES> & {
    chatId: string;
  }): Promise<null | undefined>;
  addToolResult({
    chatId,
    toolCallId,
    result,
  }: {
    chatId: string;
    toolCallId: string;
    result: unknown;
  }): Promise<void>;
  stopStream({ chatId }: { chatId: string }): Promise<void>;
  private emit;
  private getChat;
  private triggerRequest;
}

type ChatRequestOptions = {
  /**
    Additional headers that should be to be passed to the API endpoint.
     */
  headers?: Record<string, string> | Headers;
  /**
    Additional body JSON properties that should be sent to the API endpoint.
     */
  body?: object;
};
type UseChatOptions<MESSAGE_METADATA = unknown, DATA_TYPES extends UIDataTypes = UIDataTypes> = {
  /**
   * A unique identifier for the chat. If not provided, a random one will be
   * generated. When provided, the `useChat` hook with the same `id` will
   * have shared states across components.
   */
  id?: string;
  /**
   * Initial input of the chat.
   */
  initialInput?: string;
  /**
    Optional callback function that is invoked when a tool call is received.
    Intended for automatic client-side tool execution.
  
    You can optionally return a result for the tool call,
    either synchronously or asynchronously.
       */
  onToolCall?: ({
    toolCall,
  }: {
    toolCall: ToolCall<string, unknown>;
  }) => void | Promise<unknown> | unknown;
  /**
   * Optional callback function that is called when the assistant message is finished streaming.
   *
   * @param message The message that was streamed.
   */
  onFinish?: (options: { message: UIMessage<MESSAGE_METADATA, DATA_TYPES> }) => void;
  /**
   * Callback function to be called when an error is encountered.
   */
  onError?: (error: Error) => void;
  /**
   * A way to provide a function that is going to be used for ids for messages and the chat.
   * If not provided the default AI SDK `generateId` is used.
   */
  generateId?: IdGenerator;
  /**
   * Optional chat store. Default is used when not provided.
   */
  chatStore?: ChatStore<MESSAGE_METADATA, DATA_TYPES>;
};
type OriginalUseChatOptions<MESSAGE_METADATA = unknown> = {
  /**
   * Schema for the message metadata. Validates the message metadata.
   * Message metadata can be undefined or must match the schema.
   */
  messageMetadataSchema?: Schema<MESSAGE_METADATA>;
  /**
   * The API endpoint that accepts a `{ messages: Message[] }` object and returns
   * a stream of tokens of the AI chat response. Defaults to `/api/chat`.
   */
  api?: string;
  /**
   * A unique identifier for the chat. If not provided, a random one will be
   * generated. When provided, the `useChat` hook with the same `id` will
   * have shared states across components.
   */
  id?: string;
  /**
   * Initial messages of the chat. Useful to load an existing chat history.
   */
  initialMessages?: UIMessage<NoInfer<MESSAGE_METADATA>>[];
  /**
   * Initial input of the chat.
   */
  initialInput?: string;
  /**
    Optional callback function that is invoked when a tool call is received.
    Intended for automatic client-side tool execution.
  
    You can optionally return a result for the tool call,
    either synchronously or asynchronously.
       */
  onToolCall?: ({
    toolCall,
  }: {
    toolCall: ToolCall<string, unknown>;
  }) => void | Promise<unknown> | unknown;
  /**
   * Optional callback function that is called when the assistant message is finished streaming.
   *
   * @param message The message that was streamed.
   */
  onFinish?: (options: { message: UIMessage<NoInfer<MESSAGE_METADATA>> }) => void;
  /**
   * Callback function to be called when an error is encountered.
   */
  onError?: (error: Error) => void;
  /**
   * A way to provide a function that is going to be used for ids for messages and the chat.
   * If not provided the default AI SDK `generateId` is used.
   */
  generateId?: IdGenerator;
  /**
   * The credentials mode to be used for the fetch request.
   * Possible values are: 'omit', 'same-origin', 'include'.
   * Defaults to 'same-origin'.
   */
  credentials?: RequestCredentials;
  /**
   * HTTP headers to be sent with the API request.
   */
  headers?: Record<string, string> | Headers;
  /**
   * Extra body object to be sent with the API request.
   * @example
   * Send a `sessionId` to the API along with the messages.
   * ```js
   * useChat({
   *   body: {
   *     sessionId: '123',
   *   }
   * })
   * ```
   */
  body?: object;
  /**
    Streaming protocol that is used. Defaults to `ui-message`.
       */
  streamProtocol?: 'ui-message' | 'text';
  /**
    Custom fetch implementation. You can use it as a middleware to intercept requests,
    or to provide a custom fetch implementation for e.g. testing.
        */
  fetch?: FetchFunction;
  /**
    Maximum number of sequential LLM calls (steps), e.g. when you use tool calls.
    Must be at least 1.
  
    A maximum number is required to prevent infinite loops in the case of misconfigured tools.
  
    By default, it's set to 1, which means that only a single LLM call is made.
     */
  maxSteps?: number;
};

declare const getOriginalFetch$1: () => typeof fetch;
declare function callChatApi<MESSAGE_METADATA>({
  api,
  body,
  streamProtocol,
  credentials,
  headers,
  abortController,
  onUpdate,
  onFinish,
  onToolCall,
  generateId,
  fetch,
  lastMessage,
  requestType,
  messageMetadataSchema,
}: {
  api: string;
  body: Record<string, any>;
  streamProtocol: 'ui-message' | 'text' | undefined;
  credentials: RequestCredentials | undefined;
  headers: HeadersInit | undefined;
  abortController: (() => AbortController | null) | undefined;
  onUpdate: (options: { message: UIMessage<MESSAGE_METADATA> }) => void;
  onFinish: UseChatOptions<MESSAGE_METADATA>['onFinish'];
  onToolCall: UseChatOptions<MESSAGE_METADATA>['onToolCall'];
  generateId: IdGenerator;
  fetch: ReturnType<typeof getOriginalFetch$1> | undefined;
  lastMessage: UIMessage<MESSAGE_METADATA> | undefined;
  requestType?: 'generate' | 'resume';
  messageMetadataSchema?: Schema<MESSAGE_METADATA>;
}): Promise<void>;

declare const getOriginalFetch: () => typeof fetch;
declare function callCompletionApi({
  api,
  prompt,
  credentials,
  headers,
  body,
  streamProtocol,
  setCompletion,
  setLoading,
  setError,
  setAbortController,
  onFinish,
  onError,
  fetch,
}: {
  api: string;
  prompt: string;
  credentials: RequestCredentials | undefined;
  headers: HeadersInit | undefined;
  body: Record<string, any>;
  streamProtocol: 'data' | 'text' | undefined;
  setCompletion: (completion: string) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: Error | undefined) => void;
  setAbortController: (abortController: AbortController | null) => void;
  onFinish: ((prompt: string, completion: string) => void) | undefined;
  onError: ((error: Error) => void) | undefined;
  fetch: ReturnType<typeof getOriginalFetch> | undefined;
}): Promise<string | null | undefined>;

declare function convertFileListToFileUIParts(
  files: FileList | undefined,
): Promise<Array<FileUIPart>>;

/**
Converts an array of messages from useChat into an array of CoreMessages that can be used
with the AI core functions (e.g. `streamText`).
 */
declare function convertToModelMessages<TOOLS extends ToolSet = never>(
  messages: Array<Omit<UIMessage, 'id'>>,
  options?: {
    tools?: TOOLS;
  },
): ModelMessage[];
/**
@deprecated Use `convertToModelMessages` instead.
 */
declare const convertToCoreMessages: typeof convertToModelMessages;

declare function defaultChatStore<
  MESSAGE_METADATA = unknown,
  DATA_TYPES extends UIDataTypes = UIDataTypes,
>({
  api,
  fetch,
  streamProtocol,
  credentials,
  headers,
  body,
  prepareRequestBody,
  generateId,
  messageMetadataSchema,
  maxSteps,
  chats,
}: {
  /**
   * Schema for the message metadata. Validates the message metadata.
   * Message metadata can be undefined or must match the schema.
   */
  messageMetadataSchema?: Schema<MESSAGE_METADATA>;
  /**
   * The API endpoint that accepts a `{ messages: Message[] }` object and returns
   * a stream of tokens of the AI chat response.
   */
  api: string;
  /**
   * A way to provide a function that is going to be used for ids for messages and the chat.
   * If not provided the default AI SDK `generateId` is used.
   */
  generateId?: IdGenerator;
  /**
   * The credentials mode to be used for the fetch request.
   * Possible values are: 'omit', 'same-origin', 'include'.
   * Defaults to 'same-origin'.
   */
  credentials?: RequestCredentials;
  /**
   * HTTP headers to be sent with the API request.
   */
  headers?: Record<string, string> | Headers;
  /**
   * Extra body object to be sent with the API request.
   * @example
   * Send a `sessionId` to the API along with the messages.
   * ```js
   * useChat({
   *   body: {
   *     sessionId: '123',
   *   }
   * })
   * ```
   */
  body?: object;
  /**
      Streaming protocol that is used. Defaults to `ui-message`.
         */
  streamProtocol?: 'ui-message' | 'text';
  /**
      Custom fetch implementation. You can use it as a middleware to intercept requests,
      or to provide a custom fetch implementation for e.g. testing.
          */
  fetch?: FetchFunction;
  /**
      Maximum number of sequential LLM calls (steps), e.g. when you use tool calls.
      Must be at least 1.
  
      A maximum number is required to prevent infinite loops in the case of misconfigured tools.
  
      By default, it's set to 1, which means that only a single LLM call is made.
       */
  maxSteps?: number;
  /**
   * When a function is provided, it will be used
   * to prepare the request body for the chat API. This can be useful for
   * customizing the request body based on the messages and data in the chat.
   *
   * @param id The id of the chat.
   * @param messages The current messages in the chat.
   * @param requestBody The request body object passed in the chat request.
   */
  prepareRequestBody?: (options: {
    id: string;
    messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
    requestBody?: object;
  }) => unknown;
  chats?: {
    [id: string]: {
      messages: UIMessage<MESSAGE_METADATA, DATA_TYPES>[];
    };
  };
}): ChatStore<MESSAGE_METADATA, DATA_TYPES>;

declare function extractMaxToolInvocationStep(
  toolInvocations: ToolInvocation[] | undefined,
): number | undefined;

declare function getToolInvocations(message: UIMessage): ToolInvocation[];

declare function shouldResubmitMessages({
  originalMaxToolInvocationStep,
  originalMessageCount,
  maxSteps,
  messages,
}: {
  originalMaxToolInvocationStep: number | undefined;
  originalMessageCount: number;
  maxSteps: number;
  messages: UIMessage[];
}): boolean;
/**
Check if the message is an assistant message with completed tool calls.
The last step of the message must have at least one tool invocation and
all tool invocations must have a result.
 */
declare function isAssistantMessageWithCompletedToolCalls(
  message: UIMessage,
): message is UIMessage & {
  role: 'assistant';
};

/**
 * Updates the result of a specific tool invocation in the last message of the given messages array.
 *
 * @param {object} params - The parameters object.
 * @param {UIMessage[]} params.messages - An array of messages, from which the last one is updated.
 * @param {string} params.toolCallId - The unique identifier for the tool invocation to update.
 * @param {unknown} params.toolResult - The result object to attach to the tool invocation.
 * @returns {void} This function does not return anything.
 */
declare function updateToolCallResult({
  messages,
  toolCallId,
  toolResult: result,
}: {
  messages: UIMessage[];
  toolCallId: string;
  toolResult: unknown;
}): void;

type CompletionRequestOptions = {
  /**
    An optional object of headers to be passed to the API endpoint.
     */
  headers?: Record<string, string> | Headers;
  /**
    An optional object to be passed to the API endpoint.
       */
  body?: object;
};
type UseCompletionOptions = {
  /**
   * The API endpoint that accepts a `{ prompt: string }` object and returns
   * a stream of tokens of the AI completion response. Defaults to `/api/completion`.
   */
  api?: string;
  /**
   * An unique identifier for the chat. If not provided, a random one will be
   * generated. When provided, the `useChat` hook with the same `id` will
   * have shared states across components.
   */
  id?: string;
  /**
   * Initial prompt input of the completion.
   */
  initialInput?: string;
  /**
   * Initial completion result. Useful to load an existing history.
   */
  initialCompletion?: string;
  /**
   * Callback function to be called when the completion is finished streaming.
   */
  onFinish?: (prompt: string, completion: string) => void;
  /**
   * Callback function to be called when an error is encountered.
   */
  onError?: (error: Error) => void;
  /**
   * The credentials mode to be used for the fetch request.
   * Possible values are: 'omit', 'same-origin', 'include'.
   * Defaults to 'same-origin'.
   */
  credentials?: RequestCredentials;
  /**
   * HTTP headers to be sent with the API request.
   */
  headers?: Record<string, string> | Headers;
  /**
   * Extra body object to be sent with the API request.
   * @example
   * Send a `sessionId` to the API along with the prompt.
   * ```js
   * useChat({
   *   body: {
   *     sessionId: '123',
   *   }
   * })
   * ```
   */
  body?: object;
  /**
    Streaming protocol that is used. Defaults to `data`.
       */
  streamProtocol?: 'data' | 'text';
  /**
    Custom fetch implementation. You can use it as a middleware to intercept requests,
    or to provide a custom fetch implementation for e.g. testing.
        */
  fetch?: FetchFunction;
};

export {
  AssistantContent,
  AssistantModelMessage,
  CallSettings,
  CallWarning,
  ChatRequestOptions,
  ChatStatus,
  ChatStore,
  ChatStoreEvent,
  ChatTransport,
  ChunkDetector,
  CompletionRequestOptions,
  CoreAssistantMessage,
  CoreMessage,
  CoreSystemMessage,
  CoreToolMessage,
  CoreUserMessage,
  CreateUIMessage,
  DataContent,
  DataUIPart,
  DeepPartial,
  DefaultChatTransport,
  DownloadError,
  EmbedManyResult,
  EmbedResult,
  Embedding,
  EmbeddingModel,
  EmbeddingModelUsage,
  GenerateImageResult as Experimental_GenerateImageResult,
  GeneratedFile as Experimental_GeneratedImage,
  SpeechResult as Experimental_SpeechResult,
  TranscriptionResult as Experimental_TranscriptionResult,
  FilePart,
  FileUIPart,
  FinishReason,
  GenerateObjectResult,
  GenerateTextOnStepFinishCallback,
  GenerateTextResult,
  GeneratedAudioFile,
  GeneratedFile,
  ImageModel,
  ImageGenerationWarning as ImageModelCallWarning,
  ImageModelProviderMetadata,
  ImageModelResponseMetadata,
  ImagePart,
  InvalidArgumentError,
  InvalidDataContentError,
  InvalidMessageRoleError,
  InvalidStreamPartError,
  InvalidToolArgumentsError,
  JSONRPCError,
  JSONRPCMessage,
  JSONRPCNotification,
  JSONRPCRequest,
  JSONRPCResponse,
  JSONValue,
  JsonToSseTransformStream,
  LanguageModel,
  LanguageModelRequestMetadata,
  LanguageModelResponseMetadata,
  LanguageModelUsage,
  MCPClientError,
  MCPTransport,
  MessageConversionError,
  ModelMessage,
  NoImageGeneratedError,
  NoObjectGeneratedError,
  NoOutputSpecifiedError,
  NoSuchProviderError,
  NoSuchToolError,
  ObjectStreamPart,
  OriginalUseChatOptions,
  output as Output,
  Prompt,
  Provider,
  ProviderMetadata,
  ProviderOptions,
  ProviderRegistryProvider,
  ReasoningUIPart,
  RepairTextFunction,
  RetryError,
  SourceUIPart,
  SpeechModel,
  SpeechModelResponseMetadata,
  SpeechWarning,
  StepResult,
  StepStartUIPart,
  StopCondition,
  StreamObjectOnFinishCallback,
  StreamObjectResult,
  StreamTextOnChunkCallback,
  StreamTextOnErrorCallback,
  StreamTextOnFinishCallback,
  StreamTextOnStepFinishCallback,
  StreamTextResult,
  StreamTextTransform,
  SystemModelMessage,
  TelemetrySettings,
  TextPart,
  TextStreamPart,
  TextUIPart,
  Tool,
  ToolCallPart,
  ToolCallRepairError,
  ToolCallRepairFunction,
  ToolCallUnion,
  ToolChoice,
  ToolContent,
  ToolExecutionError,
  ToolExecutionOptions,
  ToolInvocation,
  ToolInvocationUIPart,
  ToolModelMessage,
  ToolResultPart,
  ToolResultUnion,
  ToolSet,
  TranscriptionModel,
  TranscriptionModelResponseMetadata,
  TranscriptionWarning,
  UIDataTypes,
  UIMessage,
  UIMessagePart,
  UIMessageStreamOptions,
  UIMessageStreamPart,
  UIMessageStreamWriter,
  UseChatOptions,
  UseCompletionOptions,
  UserContent,
  UserModelMessage,
  appendClientMessage,
  assistantModelMessageSchema,
  callChatApi,
  callCompletionApi,
  convertFileListToFileUIParts,
  convertToCoreMessages,
  convertToModelMessages,
  coreAssistantMessageSchema,
  coreMessageSchema,
  coreSystemMessageSchema,
  coreToolMessageSchema,
  coreUserMessageSchema,
  cosineSimilarity,
  createProviderRegistry,
  createTextStreamResponse,
  createUIMessageStream,
  createUIMessageStreamResponse,
  customProvider,
  defaultChatStore,
  defaultSettingsMiddleware,
  embed,
  embedMany,
  createMCPClient as experimental_createMCPClient,
  experimental_createProviderRegistry,
  experimental_customProvider,
  generateImage as experimental_generateImage,
  generateSpeech as experimental_generateSpeech,
  transcribe as experimental_transcribe,
  extractMaxToolInvocationStep,
  extractReasoningMiddleware,
  generateObject,
  generateText,
  getTextFromDataUrl,
  getToolInvocations,
  hasToolCall,
  isAssistantMessageWithCompletedToolCalls,
  isDeepEqualData,
  maxSteps,
  modelMessageSchema,
  parsePartialJson,
  pipeTextStreamToResponse,
  pipeUIMessageStreamToResponse,
  shouldResubmitMessages,
  simulateReadableStream,
  simulateStreamingMiddleware,
  smoothStream,
  streamObject,
  streamText,
  systemModelMessageSchema,
  tool,
  toolModelMessageSchema,
  updateToolCallResult,
  userModelMessageSchema,
  wrapLanguageModel,
};
